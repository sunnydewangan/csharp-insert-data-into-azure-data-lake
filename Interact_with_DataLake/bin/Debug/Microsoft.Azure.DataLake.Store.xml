<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.DataLake.Store</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Azure.DataLake.Store.AclTools.RequestedAclType">
            <summary>
            Types of ACL operations
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.RequestedAclType.ModifyAcl">
            <summary>
            Adds new Acl entries
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.RequestedAclType.SetAcl">
            <summary>
            Resets the acl entries
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.RequestedAclType.RemoveAcl">
            <summary>
            Removes the specified ACL entries
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor">
            <summary>
            This class is used to Acl Processor and Acl Verification. Acl Verification is insternal
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.Client">
            <summary>
            Adls Client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.AclEntries">
            <summary>
            Acl entries that should be used for Acl modify/set/remove
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.FileAclEntries">
            <summary>
            AclEntries without the default Acl entries since default does not apply for files
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.Queue">
            <summary>
            Priority Queue that queues the Acl jobs
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor._clientException">
            <summary>
            Client exception if any raised by any thread
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.NumThreads">
            <summary>
            Number of threads that process the Acl
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor._threadWorker">
            <summary>
            Array of thread workers
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor._thisLock">
            <summary>
            Mutex Lock object for doing synchronized setting and getting the clientexception
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.Type">
            <summary>
            Job type-Set Acl or Modify Acl or Remove Acl or ACl set verify or Acl modify verify or Acl remove Verfiy
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor._filesCount">
            <summary>
            Total Files processed
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor._directoryCount">
            <summary>
            Total Directories processed
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor._filesCorrect">
            <summary>
            Number of files for which Acl change was correct. This is used for internal use.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor._directoryCorrect">
            <summary>
            Number of directories for which Acl change was correct. This is used for internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.SetException(System.Exception)">
            <summary>
            Atomically sets the client exception
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.GetException">
            <summary>
            Atomically gets the client exception
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.RunAclProcessor(System.String,Microsoft.Azure.DataLake.Store.AdlsClient,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},Microsoft.Azure.DataLake.Store.AclTools.RequestedAclType,System.Int32)">
            <summary>
            Api to call Acl Processor. Runs Acl Processor and returns the results.
            </summary>
            <param name="path">Root path from where the Acl recursive processor will start</param>
            <param name="client">ADLS Client</param>
            <param name="aclEntries">Acl Entries to change</param>
            <param name="type">Type of Acl Job: Acl modify or Acl set or acl remove</param>
            <param name="threadCount">Custom number of threads</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.RunAclVerifier(System.String,Microsoft.Azure.DataLake.Store.AdlsClient,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},Microsoft.Azure.DataLake.Store.AclTools.RequestedAclType,System.Int32)">
            <summary>
            Internal test Api to verify Acl Processor. Runs Acl verifier and returns number of files and directories processed correctly.
            </summary>
            <param name="path">Root path from where the Acl recursive verifier will start</param>
            <param name="client">ADLS Client</param>
            <param name="aclEntries">Acl Entries to verify</param>
            <param name="type">Type of Acl Job: Acl modify verify or Acl set verify or acl remove verify</param>
            <param name="threadCount">Custom number of threads</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.ProcessAcl">
            <summary>
            Starts the Acl Processor threads. Returns the results or throws any exceptions.
            </summary>
            <returns>Acl Processor: Number of files and directories processed or ACl Verification: Number of files and directories processed and number of files and directories correctly processed by Acl Processor</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.IncrementCorrectCount(Microsoft.Azure.DataLake.Store.DirectoryEntryType)">
            <summary>
            Increments the correct count of files and directories
            </summary>
            <param name="type">Type of Directory entry</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AclTools.AclProcessor.Run">
            <summary>
            Method run by a single thread. Polls a directory entry. If job is of type EnumerateDirectory then enumerates contents in it and queues them. 
            If job is of type Acl Change then performs the Acl change. If job type is Acl Verify then does acl verification
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.AclTools.AclProcessorStats">
            <summary>
            Acl Processor stats
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessorStats.FilesCorrect">
            <summary>
            Number of files correctly processed
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessorStats.DirectoriesCorrect">
            <summary>
            Number of directories correctly processed
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessorStats.FilesProcessed">
            <summary>
            Number of files processed
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AclTools.AclProcessorStats.DirectoryProcessed">
            <summary>
            Number of directories processed
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AclTools.Jobs.VerifyChangeAclJob.CheckAclListContains(System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Boolean)">
            <summary>
            Verifies whether Acl has been changed corerctly by comparing current Acl entries for the directory entry and the input acl entries
            </summary>
            <param name="parentList">Acl entries currently retrieved from the file on server</param>
            <param name="subList">Acl entries from input that was given as input to Acl Processor</param>
            <param name="notContains">Whether to check remove Acl has worked</param>
            <returns>True if the verify is correct else false</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.Acl.AclAction">
            <summary>
            Available Access control permissions
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Acl.AclAction.None">
            <summary>
            No permissions
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Acl.AclAction.ExecuteOnly">
            <summary>
            Execute only permissions
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Acl.AclAction.WriteOnly">
            <summary>
            Write only permissions
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Acl.AclAction.ReadOnly">
            <summary>
            Read only permissions
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Acl.AclAction.ReadWrite">
            <summary>
            Read and write permission
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Acl.AclAction.ReadExecute">
            <summary>
            Read and execute permission
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Acl.AclAction.WriteExecute">
            <summary>
            Write and execute permission
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Acl.AclAction.All">
            <summary>
            All read, write and execute permission
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.Acl.AclActionExtension">
            <summary>
            Extension class
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclActionExtension.GetAclAction(System.String)">
            <summary>
            Returns the AclAction corresponding to the octal permission. For "rwx" returns AclAction.All
            </summary>
            <param name="rwx">Octal permission</param>
            <returns>Acl Action</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclActionExtension.GetRwx(Microsoft.Azure.DataLake.Store.Acl.AclAction)">
            <summary>
            Extension method that returns the octal permission corresponding to the AclACtion. For ex: AclAction.ReadExecute => "r-x"
            </summary>
            <param name="act">Acl aCtion</param>
            <returns>Octal permission string</returns>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclEntry.Type">
            <summary>
            Type of ACL entry: User/group/Other/mask
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclEntry.UserOrGroupId">
            <summary>
            Object ID of the object depending on the type of the ACL entry
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclEntry.Scope">
            <summary>
            ACCESS or DEFAULT
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclEntry.Action">
            <summary>
            The type of ACL to set
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclEntry.#ctor(Microsoft.Azure.DataLake.Store.Acl.AclType,System.String,Microsoft.Azure.DataLake.Store.Acl.AclScope,Microsoft.Azure.DataLake.Store.Acl.AclAction)">
            <summary>
            Public constructor
            </summary>
            <param name="type">Type of ACL entry: User/group/Other/mask</param>
            <param name="userOrGroupId">Object ID of the object depending on the type of the ACL entry. For acl type other and mask it should be null</param>
            <param name="scope">ACCESS or DEFAULT</param>
            <param name="action">The type of ACL to set</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclEntry.ParseAclEntryString(System.String,System.Boolean)">
            <summary>
            Parses a AclEntry string into acl type, acl type Id, acl scope and acl action (permissions).
            Throws exception if the acl string is not correct.
            </summary>
            <param name="aclEntry">Acl Entry string delimited by ':'</param>
            <param name="removeAcl">Whether this string is for removing Acl.</param>
            <returns>Acl Entry instance</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclEntry.ParseAclEntriesString(System.String)">
            <summary>
            Parses each acl entry string and then returns the list of all acl entries
            </summary>
            <param name="aclEntries">String containing the acl entries each entry is delimited by ','</param>
            <returns>List of acl entries</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclEntry.SerializeAcl(System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Boolean)">
            <summary>
            Serializes the ACL entries from a list of ACL entries to a string format
            </summary>
            <param name="aclList">List of ACL entries</param>
            <param name="removeAcl">True if is called while removing ACLs</param>
            <returns>List of Acl entries concatenated in a string format each entry is delimited by ','</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclEntry.ToString(System.Boolean)">
            <summary>
            Returns the string format of each ACL entry
            </summary>
            <param name="removeAcl">True if is called while removing ACLs</param>
            <returns>Acl entry in a string format where each part is delimited by ':'</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclEntry.Equals(Microsoft.Azure.DataLake.Store.Acl.AclEntry)">
            <summary>
            Returns true if the type, type name, scope and action are all same
            </summary>
            <param name="entry">Acl entry</param>
            <returns>True if Acl entries are equal else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclEntry.Equals(System.Object)">
            <summary>
            Returns true if the type, type name, scope and action are all same
            </summary>
            <param name="obj">Acl entry</param>
            <returns>true if AclEntries are same else false</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.Acl.AclScope">
            <summary>
            Scope of ACL entry
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.Acl.AclStatus">
            <summary>
            Class that encapsulates Acl entries, owner ID, group ID, octal permission and sticky bit (only for a directory)
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclStatus.Entries">
            <summary>
            ACL entries of the file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclStatus.Owner">
            <summary>
            Owner of the file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclStatus.Group">
            <summary>
            Group ID that owns the file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclStatus.Permission">
            <summary>
            Octal permission
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Acl.AclStatus.StickyBit">
            <summary>
            Sticky Bit
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Acl.AclStatus.#ctor(System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes Acl Status
            </summary>
            <param name="list">Acl Entry list</param>
            <param name="owner">Owner</param>
            <param name="group">Group Id</param>
            <param name="permission">Permission string</param>
            <param name="stickyBit">Sticky Bit</param>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.Acl.AclType">
            <summary>
            Type of ACL entry
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.AdlsClient">
            <summary>
            Client of Azure data lake store. It contains the public APIs to perform operations of REST API which are easier to call and more usable than Core APIs. Core APIs provide more freedom but ADLSClient provide more commonly used forms.
            It encapsulates the Authorization token and token refresh. Contains factory methods that takes a ServiceClientCredential or a string auth token and returns instance of this class. For every operation it provides
            a async and sync version. Every sync method is a wait on async method with exception of Create and Concurrent append. Currently this class is not inheritable since it has not exposed constructors.
            Adls use NLog for logging. adls.dotnet.* is the name of the logger to obtain all logs.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsClient.ClientLogger">
            <summary>
            Logger to log information (debug/error/trace) regarding client
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsClient._thisLock">
            <summary>
            Object synchronise setters/getters for clienttoken and proto
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsClient.UserAgent">
            <summary>
            User agent-SDKVersion/OSName, version, architecture and Dot netversion
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsClient._userAgentString">
            <summary>
            UserAgent/UserAgentSuffix
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsClient._proto">
            <summary>
            whether request is HTTP or HTTPS. It is mainly HTTPS. It is set as HTTP only for testing purposes
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsClient.AccountFQDN">
            <summary>
            Azure data lake store account name including full domain name
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsClient._atomicClientId">
            <summary>
            Field that just tracks the number of Clients running in an application
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsClient.ClientId">
            <summary>
            Client object ID
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsClient.AccessToken">
            <summary>
            Authorization token
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsClient.AccessProvider">
            <summary>
            Authorization token provider
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsClient.SdkVersion">
            <summary>
            SDK version- AssemblyFileVersion
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsClient.DefaultNumThreads">
            <summary>
            Default number of threads used by tools like uploader/downloader, recursive acl change and other multi-threaded tools using the SDK.
            Can be used to set ServicePointManager.DefaultConnectionLimit if you want the SDK to decide number of threads it uses for multi-threaded tools.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.#cctor">
            <summary>
            Static constructor that initializes the static fields
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.#ctor">
            <summary>
            Protected constructor for moq tests
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CreateClientWithoutAccntValidation(System.String,System.String)">
            <summary>
            Internal factory method that returns a AdlsClient without Account validation. For testing purposes
            </summary>
            <param name="accnt">Azure data lake store account name including full domain name (e.g. contoso.azuredatalake.net)</param>
            <param name="token">Token</param>
            <returns>AdlsClient</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CreateClient(System.String,System.String)">
            <summary>
            Factory method that creates an instance AdlsClient using the token key. If an application wants to perform multi-threaded operations using this SDK
            it is recomended to set ServicePointManager.DefaultConnectionLimit to the number of threads application wants the sdk to use before creating any instance of AdlsClient.
            </summary>
            <param name="accountFqdn">Azure data lake store account name including full domain name (e.g. contoso.azuredatalakestore.net)</param>
            <param name="token">Full authorization Token e.g. Bearing: abcddsfere.....</param>
            <returns>AdlsClient</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CreateClient(System.String,Microsoft.Rest.ServiceClientCredentials)">
            <summary>
            Factory method that creates an instance of AdlsClient using ServiceClientCredential. If an application wants to perform multi-threaded operations using this SDK
            it is recomended to set ServicePointManager.DefaultConnectionLimit to the number of threads application wants the sdk to use before creating any instance of AdlsClient.
            </summary>
            <param name="accountFqdn">Azure data lake store account name including full domain name  (e.g. contoso.azuredatalakestore.net)</param>
            <param name="creds">Credentials that retrieves the Auth token</param>
            <returns>AdlsClient</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetInsecureHttp">
            <summary>
            Sets the request protocol as http. Only set for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetUserAgent">
            <summary>
            Atomically returns the UserAgent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.AddUserAgentSuffix(System.String)">
            <summary>
            Adds the user agent suffix
            </summary>
            <param name="suffix">User Agent suffix</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetHttpPrefix">
            <summary>
            Gets the Http prefix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the authorization token
            </summary>
            <param name="cancelToken">CAcellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetToken(System.String)">
            <summary>
            Sets the auth token.
            </summary>
            <param name="accessToken">Access token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CreateDirectoryAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous API to create a directory
            </summary>
            <param name="dirName">Name of directory</param>
            <param name="octalPermission">Octal permission</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>true if it creates the directory else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CreateDirectory(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Synchronous API to create a directory
            </summary>
            <param name="dirName">Name of directory</param>
            <param name="octalPermission">Octal permission</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>true if it creates the directory else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetReadStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous API that returns the stream to read data from file in ADLS
            </summary>
            <param name="filename">File name</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Input stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetReadStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Synchronous API that returns the stream to read data from file in ADLS
            </summary>
            <param name="filename">File name</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Input stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetReadStreamAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronous API that returns the stream to read data from file in ADLS
            </summary>
            <param name="filename">File name</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <param name="bufferCapacity"> Buffer Capacity</param>
            <returns>Input stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetReadStream(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Synchronous API that returns the stream to read data from file in ADLS
            </summary>
            <param name="filename">File name</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <param name="bufferCapacity"> Buffer Capacity</param>
            <returns>Input stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetAppendStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous API that returns the stream to write data to a file in ADLS. The file is opened with exclusive 
            access - any attempt to open the same file for append will fail while this stream is open. 
            
            Threading: The returned stream is not thread-safe.
            </summary>
            <param name="filename">File name</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetAppendStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Synchronous API that returns the stream to write data to a file in ADLS. The file is opened with exclusive 
            access - any attempt to open the same file for append will fail while this stream is open.  
            
            Threading: The returned stream is not thread-safe.
            </summary>
            <param name="filename">File name</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CreateFileAsync(System.String,Microsoft.Azure.DataLake.Store.IfExists,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronous API that creates a file and returns the stream to write data to that file in ADLS. The file is opened with exclusive 
            access - any attempt to open the same file for append will fail while this stream is open. 
            
            Threading: The returned stream is not thread-safe.
            </summary>
            <param name="filename">File name</param>
            <param name="mode">Overwrites the existing file if the mode is Overwrite</param>
            <param name="octalPermission">Octal permission string, can be null</param>
            <param name="createParent">If true creates any non-existing parent directories</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CreateFile(System.String,Microsoft.Azure.DataLake.Store.IfExists,System.String,System.Boolean)">
            <summary>
            Synchronous API that creates a file and returns the stream to write data to that file in ADLS. The file is opened with exclusive 
            access - any attempt to open the same file for append will fail while this stream is open.  
            
            Threading: The returned stream is not thread-safe.
            </summary>
            <param name="filename">File name</param>
            <param name="mode">Overwrites the existing file if the mode is Overwrite</param>
            <param name="octalPermission">Octal permission string</param>
            <param name="createParent">If true creates any non-existing parent directories</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous api to delete a file or directory. For directory it will only delete if it is empty.
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if the path is deleted successfully else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Synchronous api to delete a file or directory. For directory it will only delete if it is empty.
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if the path is deleted successfully else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.DeleteRecursiveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous api to delete a file or directory recursively
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if the path is deleted successfully else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.DeleteRecursive(System.String,System.Threading.CancellationToken)">
            <summary>
            Synchronous api to delete a file or directory recursively. If it is a non-empty directory then it deletes the sub-directories or files.
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if the path is deleted successfully else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.RenameAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronous API to rename a file or directory.
            For renaming directory: If the destination exists then it puts the source directory one level under the destination.
            </summary>
            <param name="path">Path of the source file or directory</param>
            <param name="destination">Destination path. For directory: If the destination exists then it puts the source directory one level under the destination. If tthere is a subdirectory with same name as source one level under the destination path, rename fails</param>
            <param name="overwrite">For file: If true then overwrites the destination file if it exists. Rename of folders cannot result in an overwrite of the target.</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if the path is renamed successfully else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.Rename(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Synchronous API to rename a file or directory.
            For renaming directory: If the destination exists then it puts the source directory one level under the destination.
            </summary>
            <param name="path">Path of the source file or directory</param>
            <param name="destination">Destination path</param>
            <param name="overwrite">For file: If true then overwrites the destination file if it exists 
                                    For directory: If the destination directory exists, then this flag has no use. Because it puts the source one level under destination.
                                                   If there is a subdirectory with same name as source one level under the destination path, this flag has no use, rename fails  </param>
                                    By default it is false
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if the path is renamed successfully else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetDirectoryEntryAsync(System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets meta data like full path, type (file or directory), group, user, permission, length,last Access Time,last Modified Time, expiry time, acl Bit, replication Factor
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="uid">Way the user or group object will be represented</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Returns the metadata of the file or directory</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetDirectoryEntry(System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Synchronously gets meta data like full path, type (file or directory), group, user, permission, length,last Access Time,last Modified Time, expiry time, acl Bit, replication Factor
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="userIdFormat">Way the user or group object will be represented</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Returns the metadata of the file or directory</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.ConcatenateFilesAsync(System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronous API to concatenate source files to a destination file
            </summary>
            <param name="destination">Path of the destination</param>
            <param name="concatFiles">List containing paths of the source files</param>
            <param name="deleteSource">If true then deletes the source directory if all the files under it are concatenated</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.ConcatenateFiles(System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Synchronous API to concatenate source files to a destination file
            </summary>
            <param name="destination">Path of the destination</param>
            <param name="concatFiles">List containing paths of the source files</param>
            <param name="deleteSource">If true then deletes the source directory if all the files under it are concatenated</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.EnumerateDirectory(System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Returns a enumerable that enumerates the sub-directories or files contained in a directory.
            By default listAfter and listBefore is empty and we enuerate all the directory entries.
            </summary>
            <param name="path">Path of the directory</param>
            <param name="userIdFormat">Way the user or group object will be represented</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Enumerable that enumerates over the contents</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.EnumerateDirectory(System.String,System.Int32,System.String,System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Returns a enumerable that enumerates the sub-directories or files contained in a directory
            </summary>
            <param name="path">Path of the directory</param>
            <param name="maxEntries">List size to obtain from server</param>
            <param name="listAfter">Filename after which list of files should be obtained from server</param>
            <param name="listBefore">Filename till which list of files should be obtained from server</param>
            <param name="userIdFormat">Way the user or group object will be represented</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Enumerable that enumerates over the contents</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetExpiryTimeAsync(System.String,Microsoft.Azure.DataLake.Store.ExpiryOption,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sets the expiry time
            </summary>
            <param name="path">Path of the file</param>
            <param name="eopt">Different type of expiry method for example: never expire, relative to now, etc that defines how to evaluate expiryTime</param>
            <param name="expiryTime">Expiry time value. It's interpretation depends on what ExpiryOption user passes</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetExpiryTime(System.String,Microsoft.Azure.DataLake.Store.ExpiryOption,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Synchronously sets the expiry time
            </summary>
            <param name="path">Path of the file</param>
            <param name="eopt">Different type of expiry method for example: never expire, relative to now, etc that defines how to evaluate expiryTime</param>
            <param name="expiryTime">Expiry time value in milliseconds. It's interpretation depends on what ExpiryOption user passes</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CheckAccessAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if the user/group has specified access of the given path
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="rwx">Permission to check in "rwx" string form. For example if the user wants to see if it has read, execute permission, the string would be r-x </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if client has access to the path else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CheckAccess(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the user/group has specified access of the given path
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="rwx">Permission to check in "rwx" string form. For example if the user wants to see if it has read, execute permission, the string would be r-x </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if client has access to the path else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetPermissionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sets the permission of the specified path
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="permission">Permission to check in unix octal form. For example if the user wants to see if owner has read, write execute permission, all groups has read write
                                     permission and others has read permission the string would be 741 </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetPermission(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the permission of the specified path
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="permission">Permission to check in unix octal form. For example if the user wants to see if owner has read, write execute permission, all groups has read write
                                     permission and others has read permission the string would be 741 </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.ModifyAclEntriesAsync(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Asynchronously modifies acl entries of a file or directory with given ACL list. It merges the exisitng ACL list with given list.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">List of Acl Entries to modify</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.ModifyAclEntries(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Modifies acl entries of a file or directory with given ACL list. It merges the exisitng ACL list with given list.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">List of Acl Entries to modify</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetAclAsync(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Asynchronously sets Acl Entries for a file or directory. It wipes out the existing Acl entries for the path.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">List of Acl Entries to set </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetAcl(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Sets Acl Entries for a file or directory. It wipes out the existing Acl entries for the path.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">List of Acl Entries to set </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetOwner(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the owner or/and group of the path
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="owner">Owner ID</param>
            <param name="group">Group ID</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.SetOwnerAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sets the owner or/and group of the path
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="owner">Owner ID</param>
            <param name="group">Group ID</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.RemoveAclEntriesAsync(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes specified Acl Entries for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">List of Acl Entries to remove</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.RemoveAclEntries(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Removes specified Acl Entries for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">List of Acl Entries to remove</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.RemoveAllAclsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes all Acl Entries for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.RemoveAllAcls(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes all Acl Entries for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.RemoveDefaultAclsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes all Acl Entries of AclScope default for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.RemoveDefaultAcls(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes all Acl Entries of AclScope default for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetAclStatusAsync(System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the ACL entry list, owner ID, group ID, octal permission and sticky bit (only for a directory) of the file/directory
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="userIdFormat">way to represent the user/group object</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetAclStatus(System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Gets the ACL entry list, owner ID, group ID, octal permission and sticky bit (only for a directory) of the file/directory
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="userIdFormat">way to represent the user/group object</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetContentSummary(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets content summary of a file or directory
            </summary>
            <param name="path">Path of the directory or file</param>
            <param name="numThreads">Number of threads</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.ConcurrentAppendAsync(System.String,System.Boolean,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronous API to perform concurrent append at server. The offset at which append will occur is determined by server. Asynchronous operation.
            </summary>
            <param name="path">Path of the file</param>
            <param name="autoCreate"></param>
            <param name="dataBytes">Array of bytes to write to the file</param>
            <param name="offset">Offset in the byte array</param>
            <param name="length">Number of bytes to write from the offset</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.ConcurrentAppend(System.String,System.Boolean,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Synchronous API to perform concurrent append at server. The offset at which append will occur is determined by server.
            </summary>
            <param name="path">Path of the file</param>
            <param name="autoCreate"></param>
            <param name="dataBytes">Array of bytes to write to the file</param>
            <param name="offset">Offset in the byte array</param>
            <param name="length">Number of bytes to write from the offset</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.CheckExists(System.String)">
            <summary>
            Checks whether file or directory exists
            </summary>
            <param name="path">Path name</param>
            <returns>True if the path exists else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.BulkUpload(System.String,System.String,System.Int32,Microsoft.Azure.DataLake.Store.IfExists,System.IProgress{Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus},System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Upload directory or file from local to remote. Transfers the contents under source directory under 
            the destination directory. Transfers the source file and saves it as the destination path.
            </summary>
            <param name="srcPath">Local source path</param>
            <param name="destPath">Remote destination path - It should always be a directory.</param>
            <param name="numThreads">Number of threads- if not passed will take default number of threads (8 times the number of physical cores)</param>
            <param name="shouldOverwrite">Whether to overwrite or skip if the destination exists</param>
            <param name="progressTracker">Progresstracker to track progress of file transfer</param>
            <param name="notRecurse">If true then does an enumeration till level one else does recursive enumeration</param>
            <param name="resume">If true then we want to resume from last transfer</param>
            <param name="isBinary">If false then writes files to data lake at newline boundaries. If true, then this is not guranteed but the upload will be faster.</param>
            <param name="cancelToken">Cancellation token</param>
            <returns>Transfer Status encapsulating the details of upload</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.BulkDownload(System.String,System.String,System.Int32,Microsoft.Azure.DataLake.Store.IfExists,System.IProgress{Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Download directory or file from remote server to local. Transfers the contents under source directory under 
            the destination directory. Transfers the source file and saves it as the destination path.
            </summary>
            <param name="srcPath">Remote source path</param>
            <param name="destPath">Local destination path. It should always be a directory.</param>
            <param name="numThreads">Number of threads- if not passed will take default number of threads (8 times the number of physical cores)</param>
            <param name="shouldOverwrite">Whether to overwrite or skip if the destination exists</param>
            <param name="progressTracker">Progresstracker to track progress of file transfer</param>
            <param name="notRecurse">If true then does an enumeration till level one else does recursive enumeration</param>
            <param name="resume">If true then we want to resume from last transfer</param>
            <param name="cancelToken">Cancel token</param>
            <returns>Transfer status encapsulating the details of download</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.ChangeAcl(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},Microsoft.Azure.DataLake.Store.AclTools.RequestedAclType,System.Int32)">
            <summary>
            Change Acl (Modify, set and remove) recursively on a directory tree
            </summary>
            <param name="path">The root directory path from where the Acl change will begin</param>
            <param name="aclEntries">Acl entries to add or set or remove depending on the input</param>
            <param name="type">Type of modification <see cref="T:Microsoft.Azure.DataLake.Store.AclTools.RequestedAclType"/></param>
            <param name="threadCount">Number of threads to use</param>
            <returns>Stats- total number of files and directories processed</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetFileProperties(System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Recursively dumps file property of alldirectories or/and files under the given path to a local or adl file. File property can be disk usage or Acl or both.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="getAclUsage">True if we want Acl usage</param>
            <param name="dumpFileName">Filename containing the ACL or Disk usage dump</param>
            <param name="getDiskUsage">True if we want disk usage</param>
            <param name="saveToLocal">True if we want to save to local file else save to ADL</param>
            <param name="numThreads">Number of threads</param>
            <param name="displayFiles">True if we want to display properties of files. By default we show properties of directories. If this is false we would not retrieve Acls for files.</param>
            <param name="hideConsistentAcl">if True then we wont dump the acl property of a directory/file if it's parent directory has same acl for all of its descendants. For ex: If 
                                                the root ("/") has same Acl for all it's descendants, then we will show the Acl for the root only. If this flag is false, then we show the Acl for all directories or files.
                                            This cannot be true when displayFiles is false because consistent Acl cannot be determined unless we retrieve acls for the files.</param>
            <param name="maxDepth">Maximum depth till which we want to view the properties</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsClient.GetExceptionFromResponse(Microsoft.Azure.DataLake.Store.OperationResponse,System.String)">
            <summary>
            Returns a ADLS Exception based on response from the server
            </summary>
            <param name="resp">Response encapsulating errors or exceptions</param>
            <param name="defaultMessage">Default message</param>
            <returns>Adls Exception</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.AdlsException">
            <summary>
            Exception returned by client. It encapsulates any remote excepotion returned from server, Unhandled and handled exception.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsException.#ctor(System.String)">
            <summary>
            Constructor that sets the message for inner exception
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.RemoteExceptionName">
            <summary>
            Remote exception name returned from the server for the last Http request for this operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.RemoteExceptionMessage">
            <summary>
            Remote exception message returned from the server for the last Http request for this operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.RemoteExceptionJavaClassName">
            <summary>
            Remote exception java classname returned from the server for the last Http request for this operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.ExceptionHistory">
            <summary>
            Exception history of all the retries for this operation. This should not be reset for every retry
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.Ex">
            <summary>
            Unhandled exception
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.Error">
            <summary>
            Handled exception errors
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.Retries">
            <summary>
            Total number of retries
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.HttpStatus">
            <summary>
            HttpStatus code
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.HttpMessage">
            <summary>
            Http message
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.TraceId">
            <summary>
            Trace Id as returned by server
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsException.LastCallLatency">
            <summary>
            Last call latency
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.AdlsInputStream">
            <summary>
            ADLS Input stream that reads data from a file on Data lake. It reads data in bulk from server to a buffer and then provides buffered output to the client as per request.
            Data can be read asynchronously/synchronously. Data can be read serially or from arbitrary points in file. Read is fully synchronous till the transport layer. ReadAsync is fully synchronous till the transport layer. 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsInputStream.IpStreamLog">
            <summary>
            Logger to log messages related to input stream
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.Filename">
            <summary>
            Filename including the full path
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.SessionId">
            <summary>
            UUID that is used to obtain the file handler (stream) easily at server
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.Client">
            <summary>
            ADLS client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.Entry">
            <summary>
            Metadata of the file. Basically needed to know the total length of the file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.Buffer">
            <summary>
            Internal buffer that stores the data read from server
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.FilePointer">
            <summary>
            Current pointer of the stream in the file. Expressed as bytes from the begining
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.BufferPointer">
            <summary>
            Pointer within the internal buffer array
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.BufferSize">
            <summary>
            Number of bytes read from the server
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.BufferCapacity">
            <summary>
            Maximum size of the internal buffer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsInputStream.DefaultBufferCapacity">
            <summary>
            Default Maximum size of the internal buffer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsInputStream._isDisposed">
            <summary>
            Flag whether stream is disposed
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.CanRead">
            <summary>
            Whether stream can read data
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.CanSeek">
            <summary>
            Whether the stream can seek data
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.CanWrite">
            <summary>
            Whether the stream can write data
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.Length">
            <summary>
            total Length of the file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsInputStream.Position">
            <summary>
            Position of the stream from begining
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.Flush">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.#ctor">
            <summary>
            Only for Mocking purpose. For mocking purpose you can inherit from this class and override your methods
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read
            Synchronous operation.
            </summary>
            <param name="output">Output byte array</param>
            <param name="offset">offset at which data should be put in the output array</param>
            <param name="count">Count of the bytes read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read
            Asynchronous operation.
            </summary>
            <param name="output">Output byte array</param>
            <param name="offset">offset at which data should be put in the output array</param>
            <param name="count">Count of the bytes read</param>
            <param name="cancelToken">Cancellation Token</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.BeforeReadService(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Verifies the Read arguments before it tries to read actual data
            </summary>
            <param name="output">Output byte array</param>
            <param name="offset">offset at which data should be put in the output array</param>
            <param name="count">Count of the bytes read</param>
            <returns>False if we have reached end of the file else true</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.AfterReadService(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data from it's internal buffer to output.
            </summary>
            <param name="output">Output byte array</param>
            <param name="offset">offset at which data should be put in the output array</param>
            <param name="count">Count of the bytes read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.ReadServiceAsync(System.Threading.CancellationToken)">
            <summary>
            Makes the call to server to read data in bulk. Resets Buffer pointer and size. Asynchronous operation.
            </summary>
            <param name="cancelToken">Cancellation Token</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.ReadService">
            <summary>
            Makes the call to server to read data in bulk. Resets Buffer pointer and size. Asynchronous operation.
            </summary>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes directly from the server. It does not update anything in the stream.
            </summary>
            <param name="position">Position in the file from where it should start reading data</param>
            <param name="output">Output byte array</param>
            <param name="offset">offset at which data should be put in the output array</param>
            <param name="count">Count of the bytes read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.ReadAsync(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes directly from the server. It does not update anything in the stream.
            </summary>
            <param name="position">Position in the file from where it should start reading data</param>
            <param name="output">Output byte array</param>
            <param name="offset">offset at which data should be put in the output array</param>
            <param name="count">Count of the bytes read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Updates the position of the stream based on SeekOrigin
            </summary>
            <param name="offset">Byte offset relative to the origin parameter</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>Current new position of the stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.SetLength(System.Int64)">
            <summary>
            Not supported
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsInputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Stream and optionally releases the managed resources
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.AdlsOutputStream">
            <summary>
            ADLS Output stream that writes data to a file on Data lake. It writes data to a buffer and when the buffer gets filled, writes data in bulk to server
            Data can be written asynchronously/synchronously. Write is fully synchronous till the transport layer. WriteAsync is fully synchronous till the transport layer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsOutputStream.OutStreamLog">
            <summary>
            Logger to log messages related to output stream
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Filename">
            <summary>
            Full path of the file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Client">
            <summary>
            ADLS client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.LeaseId">
            <summary>
            String containing the lease ID, when a client obtains a lease on a file no other client can make edits to the file 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Buffer">
            <summary>
            Internal buffer where client writes, when it gets filled up or we do flush/dispose then only we write buffer to server 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsOutputStream.BufferCapacity">
            <summary>
            Capacity of the internal buffer. Check CopyFileJob.cs before changing this threshold.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.BufferSize">
            <summary>
            Pointer in the buffer till which data is written
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.FilePointer">
            <summary>
            Pointer in file till which data is written, i.e. length of file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.MetaDataSynced">
            <summary>
            Whether metadata is synced (data is flushed). Syncing metadata is expensive so we do not want to do it unless 
            there has been appends with SYNFLAG.DATA since last append with SYNCFLAG.METADA.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.AdlsOutputStream._isDisposed">
            <summary>
            Whether the stream is disposed
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.CanRead">
            <summary>
            Stream cannot read data
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.CanSeek">
            <summary>
            Stream cannot seek data
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.CanWrite">
            <summary>
            Stream can write data
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Length">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Position">
            <summary>
            Set is not supported. Gets the position where next data will be written
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.InitializeFileSizeAsync(System.Boolean)">
            <summary>
            Initialize the file size by doing a getfilestatus if we are creating in append mode
            </summary>
            <param name="isNew">True if we are creating the file else false</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes data from buffer to server and updates the metadata
            </summary>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Flush">
            <summary>
            Synchronously flushes data from buffer to server and updates the metadata
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.SetLength(System.Int64)">
            <summary>
            Not supported
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.AddDataToBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data to internal buffer, and updates the internal buffer pointer
            </summary>
            <param name="buffer">Input byte array</param>
            <param name="offset">Offset in the byte array</param>
            <param name="count">length to copy</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.WriteVerify(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Verifies write arguments
            </summary>
            <param name="buffer">Byte buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Count</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes data to internal buffer. If the buffer fills up then writes to the file in server.
            Does it asynchronously
            </summary>
            <param name="buffer">Input byte array containing the Data to write</param>
            <param name="offset">Offset in buffer</param>
            <param name="count">Count of bytes to write</param>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to internal buffer. If the buffer fills up then writes to the file in server.
            Does it synchronously
            </summary>
            <param name="buffer">Input byte array containing the Data to write</param>
            <param name="offset">Offset in buffer</param>
            <param name="count">Count of bytes to write</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Stream and optionally releases the managed resources
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.WriteServiceAsync(Microsoft.Azure.DataLake.Store.SyncFlag,System.Threading.CancellationToken)">
            <summary>
            Makes a Append call to server to write data in buffer. Resets the FilePointer and BufferSize.
            This is an asynchronous call.
            </summary>
            <param name="flag">Type of append- It is just data or to update metadata or close the lease </param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.WriteService(Microsoft.Azure.DataLake.Store.SyncFlag)">
            <summary>
            Makes a Append call to server to write data in buffer. Resets the FilePointer and BufferSize.
            This is a synchronous call.
            </summary>
            <param name="flag">Type of append- It is just data or to update metadata or close the lease </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.PerformZeroLengthAppendAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Performs append of zero length to see whether the file is in consistent state with the client.
            This is an asynchronous operation.
            </summary>
            <param name="offsetFile">Offset in file at which the append will be made</param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.AdlsOutputStream.PerformZeroLengthAppend(System.Int64)">
            <summary>
            Performs append of zero length to see whether the file is in consistent state with the client.
            This is a synchronous operation.
            </summary>
            <param name="offsetFile">Offset in file at which the append will be made</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.BaseJob.JobPriority">
            <summary>
            Priority- Represents it's position in the max-heap. Higher priority means the job will be completed quicker.
            ChunkedFileCopy has higher priority than NonChunkedFile copy and concatenate job
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.BaseJob.DoJob">
            Performs the job and returns the transfer result of that job
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.BaseJob.DoRun(NLog.Logger)">
            <summary>
            
            </summary>
            <param name="jobLog"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.ContentProcessor">
            <summary>
            Computes the content summary of the directory
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ContentProcessor._thisLock">
            <summary>
            Mutex Lock object for doing synchronized setting and getting the clientexception
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ContentProcessor.NumThreads">
            <summary>
            Total number of thread workers
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ContentProcessor._threadWorker">
            <summary>
            Array of thread workers
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ContentProcessor._queue">
            <summary>
            Queue for containing the directory entries picked by the thread worker
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ContentProcessor._clientException">
            <summary>
            Client exception if any raised by any thread
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.ContentProcessor.CancelToken">
            <summary>
            Cancellation Token
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.ContentProcessor.Client">
            <summary>
            ADLS client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.ContentProcessor.RootPath">
            <summary>
            Root path whose content summary we need
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ContentProcessor._fileCount">
            <summary>
            Tracks total file count
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ContentProcessor._totalBytes">
            <summary>
            Tracks total size
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.ContentProcessor.GetContentSummary(Microsoft.Azure.DataLake.Store.AdlsClient,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            internal API that gets the content summary for a path
            </summary>
            <param name="client">ADLS Client</param>
            <param name="path">Path of the directory or file</param>
            <param name="numThreads"> Number of threads</param>
            <param name="cancelToken">Cacellation Token</param>
            <returns>Content summary</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.ContentProcessor.GetContentSummary">
            <summary>
            Starts each thread worker. Waits for each thread worker to finish. If there was an exception throws it.
            Else returns a contentsummary
            </summary>
            <returns>Content summary-Total file count, directory count, total size</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.ContentProcessor.SetException(Microsoft.Azure.DataLake.Store.AdlsException)">
            <summary>
            Atomically sets the client exception
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.ContentProcessor.GetException">
            <summary>
            Atomically gets the client exception
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.ContentProcessor.Run">
            <summary>
            The run method of each thread worker. It polls for a directory from the queue. Then calls listStatus for that directory.
            If it gets any sub-directory it adds it to the queue so that it can be processed again later.For each file/sub-directory it updates the file/directory/size variables
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.ContentSummary">
            <summary>
            Encapsulates total directory count, file count, space consumed
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.ContentSummary.DirectoryCount">
            <summary>
            Total directory count
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.ContentSummary.FileCount">
            <summary>
            Total file count
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.ContentSummary.Length">
            <summary>
            Total file sizes
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.ContentSummary.SpaceConsumed">
            <summary>
            Total space consumed
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.ContentSummary.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates instance of contentsummary
            </summary>
            <param name="directoryCnt">Directory count</param>
            <param name="fileCnt">File count</param>
            <param name="length">Size</param>
            <param name="spaceConsumed">Total size</param>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.ByteBuffer">
            <summary>
            Structure containing byte array, offset, and length of data in byte array
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.Core">
            <summary>
            Core layer. It contains methods for REST APIs. For each rest api command it sends a HTTP request to server.
            We have both async and sync versions of CREATE, APPEND, OPEN, CONCURRENTAPPEND. The reason we have that is if the application is doing these operations heavily using explicit threads,
            then using async-await internally creates unecessary threads in threadpool and performance degrades due to context switching. Application can create explicit threads in cases of uploader and downloader.
            All these operation also call sync versions of MakeCall in WebTransport layer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.MkdirsAsync(System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Creates a directory. 
            </summary>
            <param name="path">Path of the directory</param>
            <param name="octalPermission">Octal Permission</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>true if it creates the directory else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.IsValidOctal(System.String)">
            <summary>
            Checks if the octal permission string is a valid string
            </summary>
            <param name="octalPermission">Octal permission string</param>
            <returns>Returns true if it is a valid permission string else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.CreateAsync(System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,Microsoft.Azure.DataLake.Store.SyncFlag,System.Byte[],System.Int32,System.Int32,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Create a new file. This is an asynchronous operation.
            </summary>
            <param name="path">Path of the file</param>
            <param name="overwrite">Overwrites the existing file if the flag is true</param>
            <param name="octalPermission">Octal permission string</param>
            <param name="leaseId">String containing the lease ID, when a client obtains a lease on a file no other client can make edits to the file </param>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="createParent">If true creates any non-existing parent directories</param>
            <param name="flag">Pass SyncFlag.DATA when writing bytes of data
                               Pass SyncFlag.METADATA when metadata of the file like length, modified instant needs to be updated to be consistent
                               with the actual data of file. After passing SyncFlag.METADATA GetFileStatus and ListStatus returns consistent data.
                               Pass SyncFlag.CLOSE when no more data needs to be appended, file metadata is updated, lease is released and the stream is closed  </param>
            <param name="dataBytes">Array of bytes to write to the file</param>
            <param name="offset">Offset in the byte array</param>
            <param name="length">Number of bytes to write from the offset</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.Create(System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,Microsoft.Azure.DataLake.Store.SyncFlag,System.Byte[],System.Int32,System.Int32,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Create a new file. This is a synchronous operation.
            </summary>
            <param name="path">Path of the file</param>
            <param name="overwrite">Overwrites the existing file if the flag is true</param>
            <param name="octalPermission">Octal permission string</param>
            <param name="leaseId">String containing the lease ID, when a client obtains a lease on a file no other client can make edits to the file </param>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="createParent">If true creates any non-existing parent directories</param>
            <param name="flag">Pass SyncFlag.DATA when writing bytes of data
                               Pass SyncFlag.METADATA when metadata of the file like length, modified instant needs to be updated to be consistent
                               with the actual data of file. After passing SyncFlag.METADATA GetFileStatus and ListStatus returns consistent data.
                               Pass SyncFlag.CLOSE when no more data needs to be appended, file metadata is updated, lease is released and the stream is closed  </param>
            <param name="dataBytes">Array of bytes to write to the file</param>
            <param name="offset">Offset in the byte array</param>
            <param name="length">Number of bytes to write from the offset</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.SetQueryParamForCreate(System.Boolean,System.String,System.String,System.String,System.Boolean,Microsoft.Azure.DataLake.Store.SyncFlag,Microsoft.Azure.DataLake.Store.QueryParams,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Sets the queryparams for create operation.
            </summary>
            <param name="overwrite">Overwrites the existing file if the flag is true</param>
            <param name="octalPermission">Octal permission string</param>
            <param name="leaseId">String containing the lease ID, when a client obtains a lease on a file no other client can make edits to the file </param>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="createParent">If true creates any non-existing parent directories</param>
            <param name="flag">Pass SyncFlag.DATA when writing bytes of data
                               Pass SyncFlag.METADATA when metadata of the file like length, modified instant needs to be updated to be consistent
                               with the actual data of file. After passing SyncFlag.METADATA GetFileStatus and ListStatus returns consistent data.
                               Pass SyncFlag.CLOSE when no more data needs to be appended, file metadata is updated, lease is released and the stream is closed  </param>
            <param name="qp">QueryParams</param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <returns>True if operationresponse is set correctly else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.AppendAsync(System.String,System.String,System.String,Microsoft.Azure.DataLake.Store.SyncFlag,System.Int64,System.Byte[],System.Int32,System.Int32,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Append data to file. This is an asynchronous operation.
            </summary>
            <param name="path">Path of the file</param>
            <param name="leaseId">String containing the lease ID, when a client obtains a lease on a file no other client can make edits to the file </param>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="flag">Pass SyncFlag.DATA when writing bytes of data
                               Pass SyncFlag.METADATA when metadata of the file like length, modified instant needs to be updated to be consistent
                               with the actual data of file. After passing SyncFlag.METADATA GetFileStatus and ListStatus returns consistent data.
                               Pass SyncFlag.CLOSE when no more data needs to be appended, file metadata is updated, lease is released and the stream is closed  </param>
            <param name="offsetFile">Offset in the file at which data will be appended</param>
            <param name="dataBytes">Array of bytes to write to the file</param>
            <param name="offset">Offset in the byte array</param>
            <param name="length">Number of bytes to write from the offset</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.Append(System.String,System.String,System.String,Microsoft.Azure.DataLake.Store.SyncFlag,System.Int64,System.Byte[],System.Int32,System.Int32,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Append data to file. This is a synchronous operation.
            </summary>
            <param name="path">Path of the file</param>
            <param name="leaseId">String containing the lease ID, when a client obtains a lease on a file no other client can make edits to the file </param>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="flag">Pass SyncFlag.DATA when writing bytes of data
                               Pass SyncFlag.METADATA when metadata of the file like length, modified instant needs to be updated to be consistent
                               with the actual data of file. After passing SyncFlag.METADATA GetFileStatus and ListStatus returns consistent data.
                               Pass SyncFlag.CLOSE when no more data needs to be appended, file metadata is updated, lease is released and the stream is closed  </param>
            <param name="offsetFile">Offset in the file at which data will be appended</param>
            <param name="dataBytes">Array of bytes to write to the file</param>
            <param name="offset">Offset in the byte array</param>
            <param name="length">Number of bytes to write from the offset</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.SetQueryParamForAppend(System.String,System.String,Microsoft.Azure.DataLake.Store.SyncFlag,System.Int64,Microsoft.Azure.DataLake.Store.QueryParams,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Sets the queryparams for create operation.
            </summary>
            <param name="leaseId">String containing the lease ID, when a client obtains a lease on a file no other client can make edits to the file </param>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="flag">Pass SyncFlag.DATA when writing bytes of data
                               Pass SyncFlag.METADATA when metadata of the file like length, modified instant needs to be updated to be consistent
                               with the actual data of file. After passing SyncFlag.METADATA GetFileStatus and ListStatus returns consistent data.
                               Pass SyncFlag.CLOSE when no more data needs to be appended, file metadata is updated, lease is released and the stream is closed  </param>
            <param name="offsetFile">Offset in the file at which data will be appended</param>
            <param name="qp">QueryParams</param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.ConcurrentAppendAsync(System.String,System.Boolean,System.Byte[],System.Int32,System.Int32,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Performs concurrent append asynchronously at server. The offset at which append will occur is determined by server
            </summary>
            <param name="path">Path of the file</param>
            <param name="autoCreate"></param>
            <param name="dataBytes">Array of bytes to write to the file</param>
            <param name="offset">Offset in the byte array</param>
            <param name="length">Number of bytes to write from the offset</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.ConcurrentAppend(System.String,System.Boolean,System.Byte[],System.Int32,System.Int32,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Performs concurrent append synchronously at server. The offset at which append will occur is determined by server
            </summary>
            <param name="path">Path of the file</param>
            <param name="autoCreate"></param>
            <param name="dataBytes">Array of bytes to write to the file</param>
            <param name="offset">Offset in the byte array</param>
            <param name="length">Number of bytes to write from the offset</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.OpenAsync(System.String,System.String,System.Int64,System.Byte[],System.Int32,System.Int32,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Reads a file from server. This is an asynchronous operation.
            </summary>
            <param name="path">Path of the file</param>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="offsetFile">Offset in the file at which data will be read from</param>
            <param name="buffer"> Buffer where data read will be stored</param>
            <param name="offset">Offset in buffer where data will be read</param>
            <param name="lengthFile">Length of the data to be read</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.Open(System.String,System.String,System.Int64,System.Byte[],System.Int32,System.Int32,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Reads a file from server. This is synchronous operation.
            </summary>
            <param name="path">Path of the file</param>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="offsetFile">Offset in the file at which data will be read from</param>
            <param name="buffer"> Buffer where data read will be stored</param>
            <param name="offset">Offset in buffer where data will be read</param>
            <param name="lengthFile">Length of the data to be read</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.SetQueryParamForOpen(System.String,System.Int64,System.Int32,Microsoft.Azure.DataLake.Store.QueryParams,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Sets the queryparams for Open.
            </summary>
            <param name="sessionId">UUID that is used to obtain the file handler (stream) easily at server</param>
            <param name="offsetFile">Offset in the file at which data will be read from</param>
            <param name="lengthFile">Length of the data to be read</param>
            <param name="qp">QueryParams</param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <returns>True if the queryparams are set else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.DeleteAsync(System.String,System.Boolean,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Deletes a file or directory
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="recursive"></param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if delete is successful</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.RenameAsync(System.String,System.String,System.Boolean,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Renames a path.
            For renaming directory: If the destination exists then it puts the source directory one level under the destination.
            </summary>
            <param name="path">Path of the source file or directory</param>
            <param name="destination">Destination path</param>
            <param name="overwrite">For file: If true then overwrites the destination file if it exists 
                                    For directory: If the destination directory exists, then this flag has no use. Because it puts the source one level under destination.
                                                   If there is a subdirectory with same name as source one level under the destination path, this flag has no use. Rename fails  </param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>True if rename is successful else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.ConcatAsync(System.String,System.Collections.Generic.List{System.String},Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Concatenate source files to a destination file. By default it wont delete source directory
            </summary>
            <param name="path">Path of the destination</param>
            <param name="sourceFiles">List containing paths of the source files</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.ConcatAsync(System.String,System.Collections.Generic.List{System.String},System.Boolean,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Concatenate source files to a destination file
            </summary>
            <param name="path">Path of the destination</param>
            <param name="sourceFiles">List containing paths of the source files</param>
            <param name="deleteSourceDirectory">If true then deletes the source directory if all the files under it are concatenated</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.GetFileStatusAsync(System.String,System.Nullable{Microsoft.Azure.DataLake.Store.UserGroupRepresentation},Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Gets meta data like full path, type (file or directory), group, user, permission, length,last Access Time,last Modified Time, expiry time, acl Bit, replication Factor
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="userIdFormat">Way the user or group object will be represented</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <param name="getConsistentFileLength"> True if we want to get consistent and updated length</param>
            <returns>Returns the metadata of the file or directory</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.GetFileName(System.String)">
            <summary>
            API copied from Path.GetFileName (https://referencesource.microsoft.com/#mscorlib/system/io/path.cs,95facc58d06cadd0)
            Prevents the Invalid Char check because hadoop supports some of those characters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.ListStatusAsync(System.String,System.String,System.String,System.Int32,System.Nullable{Microsoft.Azure.DataLake.Store.UserGroupRepresentation},Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Lists the sub-directories or files contained in a directory
            </summary>
            <param name="path">Path of the directory</param>
            <param name="listAfter">Filename after which list of files should be obtained from server</param>
            <param name="listBefore">Filename till which list of files should be obtained from server</param>
            <param name="listSize">List size to obtain from server</param>
            <param name="userIdFormat">Way the user or group object will be represented</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>List of directoryentries</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.SetExpiryTimeAsync(System.String,Microsoft.Azure.DataLake.Store.ExpiryOption,System.Int64,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Set the expiry time
            </summary>
            <param name="path">Path of the file</param>
            <param name="opt">Different type of expiry method for example: never expire, relative to now, etc that defines how to evaluate expiryTime</param>
            <param name="expiryTime">Expiry time value. It's interepreation depends on what ExpiryOption user passes</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.CheckAccessSync(System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Checks if the user/group has specified access of the given path
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="rwx">Permission to check in "rwx" string form. For example if the user wants to see if it has read, execute permission, the string would be r-x </param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.SetPermissionAsync(System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Sets the permission of the specified path
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="permission">Permission to check in unix octal form. For example if the user wants to see if owner has read, write execute permission, all groups has read write
                                     permission and others has read permission the string would be 741 </param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.SetOwnerAsync(System.String,System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Sets the owner or/and group of the path
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="user">Owner Id of the path</param>
            <param name="group">Group Id of the path</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.IsValidRwx(System.String)">
            <summary>
            Verifies whether the permission string is in rwx form
            </summary>
            <param name="rwx">permission string</param>
            <returns>True if it is in correct format else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.ModifyAclEntriesAsync(System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Modifies acl entries of a file or directory with given ACL list. It merges the exisitng ACL list with given list.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">AclSpec string that contains the ACL entries delimited by comma </param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.ModifyAclEntriesAsync(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Modifies acl entries of a file or directory with given ACL list. It merges the exisitng ACL list with given list.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpecList">List of Acl Entries to modify</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.SetAclAsync(System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Sets Acl Entries for a file or directory. It wipes out the existing Acl entries for the path.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">AclSpec string that contains the ACL entries delimited by comma </param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.SetAclAsync(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Sets Acl Entries for a file or directory. It wipes out the existing Acl entries for the path.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpecList">List of Acl Entries to set </param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.RemoveAclEntriesAsync(System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Removes specified Acl Entries for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">string containing Acl Entries to remove</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.RemoveAclEntriesAsync(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Removes specified Acl Entries for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpecList">List of Acl Entries to remove</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.RemoveDefaultAclAsync(System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Removes all Acl Entries of AclScope default for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.RemoveAclAsync(System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Removes all Acl Entries for a file or directory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.GetAclStatusAsync(System.String,System.Nullable{Microsoft.Azure.DataLake.Store.UserGroupRepresentation},Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Gets the ACL entry list, owner ID, group ID, octal permission and sticky bit (only for a directory) of the file/directory
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="userIdFormat">way to represent the user/group object</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>Acl information: ACL entry list, owner ID, group ID, octal permission and sticky bit</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.Core.GetContentSummaryAsync(System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Gets content summary of a file or directory
            </summary>
            <param name="path">Path of the directory or file</param>
            <param name="client">ADLS Client</param>
            <param name="req">Options to change behavior of the Http request </param>
            <param name="resp">Stores the response/ouput of the Http request </param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
            <returns>ContentSummary of the path</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.DirectoryEntryType">
            <summary>
            Enum containing two types of directory entry
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.DirectoryEntry">
            <summary>
            Class that encapsulates the metadata of the directory entry
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.Name">
            <summary>
            Name of the entry
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.FullName">
            <summary>
            Full Path of the directory entry
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.Length">
            <summary>
            Size of the file. Zero for directory
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.Group">
            <summary>
            Group owner of the file or directory
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.User">
            <summary>
            User owner of the file or directory 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.LastAccessTime">
            <summary>
            Instant when the file was last accessed
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.LastModifiedTime">
            <summary>
            Instant when the file was last modified
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.Type">
            <summary>
            Type- File or directory
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.HasAcl">
            <summary>
            Boolean indicating whether ACLs are set
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.ExpiryTime">
            <summary>
            Instant when the file will expire
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.DirectoryEntry.Permission">
            <summary>
            Unix style permission string
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.DirectoryEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.DirectoryEntry.#ctor(System.String)">
            <summary>
            Initializes the name and full name
            </summary>
            <param name="fullName"></param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.DirectoryEntry.#ctor(System.String,System.String,System.Int64,System.String,System.String,System.Int64,System.Int64,System.String,System.String,System.Boolean,System.Int64)">
            <summary>
            Constructor that initializes each property
            </summary>
            <param name="name">Name</param>
            <param name="fullName">Full path</param>
            <param name="length">Size of file</param>
            <param name="group">Group owner</param>
            <param name="user">User owner</param>
            <param name="lastAccessTime">Last access time obtained as milliseconds from 1/1/1970</param>
            <param name="lastModifiedTime">Last modified time obtained as milliseconds from 1/1/1970</param>
            <param name="type">File or directory</param>
            <param name="permission">Unix style permission</param>
            <param name="hasAcl">Whether ACLs are set</param>
            <param name="expiryTime">Time when file would expire obtained as milliseconds from 1/1/1970</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.DirectoryEntry.GetDateTimeFromServerTime(System.Int64)">
            <summary>
            Returns a DateTime instance from server time obtained as milliseconds from 1/1/1970.
            </summary>
            <param name="time">server time obtained as milliseconds from 1/1/1970</param>
            <returns>DateTime instance</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.ExpiryOption">
            <summary>
            Different types of expiry options
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ExpiryOption.NeverExpire">
            <summary>
            File will never expire. ExpiryTime is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ExpiryOption.RelativeToNow">
            <summary>
            ExpiryTime is added to the current time
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ExpiryOption.RelativeToCreationDate">
            <summary>
            ExpiryTime is added to the creation time
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.ExpiryOption.Absolute">
            <summary>
            ExpiryTime is the actual time
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileProperties.PropertyManager.PropertyWriterQueue">
            <summary>
            Separate queue for writing property jobs. Only takes in DumpFilePropertyJob
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileProperties.PropertyManager._threadWriter">
            <summary>
            Separate single thread to write the properties to file. You only need one thread
            because you are writing to one file on a disk. Remember there is no lock around the writer write.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileProperties.PropertyManager.GetFileProperty(System.String,Microsoft.Azure.DataLake.Store.AdlsClient,System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Dumps file property to a local or adl file
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="client">Adls client</param>
            <param name="getAclProperty">True if we want Acl usage</param>
            <param name="getDiskUsage">True if we want disk usage</param>
            <param name="dumpFileName">Filename containing the dump</param>
            <param name="saveToLocal">True if we want to save to local file</param>
            <param name="numThreads">Number of threads</param>
            <param name="displayFiles">True if we want to display properties of files</param>
            <param name="hideConsistentAcl">True if we want to view consistent acl property only</param>
            <param name="maxDepth">Maximum depth till which we want to view the properties</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileProperties.PropertyManager.WriterThreadRun">
            <summary>
            This is the run method for the thread writing the dump file. Only ONE THREAD
            runs this method
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileProperties.PropertyTreeNode.PropertyTreeNodeLog">
            <summary>
            This logging is only for debuging purposes, it will dump huge amount of per-thread data
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileProperties.PropertyTreeNode.CheckAndUpdateProperties(System.Boolean,System.Boolean,Microsoft.Azure.DataLake.Store.FileProperties.PropertyTreeNode,System.Boolean)">
            <summary>
            This updates the Acl property or size proerty or both of the current node. This is called by a child node.
            If both are getting computed: For a directory we must update them together only. Meaning /Data should update both proerpties of / at the same time
            </summary>
            <param name="getAclProperty">True if we want the acl as one property</param>
            <param name="getSizeProperty">True if we want size as one property</param>
            <param name="childNode">Child node that is updating the parent node</param>
            <param name="checkBaseCase">Whether it is the base case or whether it is the case when we are going upo the tree</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileProperties.PropertyTreeNode.CheckAndUpdateParentProperties(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            For the current node updates the size or/and acl property of the parent. After this update if the parent's Acl or/and
            size properties have accounted all of it's childs then returns true
            </summary>
            <param name="getAclProperty">Whether we are running this app for acl property</param>
            <param name="getSizeProperty">whether we are </param>
            <param name="isFirstTurn">Whether we should look at the base case: base case for getAcl is when current node has no children, for getSize when the node should be directory and has no children</param>
            <returns>True if all necessary properties are updated by all the childs else false</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileStatusOutput">
            <summary>
            Enumerable that exposes enumerator:FileStatusList
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusOutput._maxEntries">
            <summary>
            Number of maximum directory entries to be retrieved from server. If -1 then retrieve all entries
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusOutput._listAfter">
            <summary>
            Filename after which list of files should be obtained from server
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusOutput._listBefore">
            <summary>
            Filename till which list of files should be obtained from server
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusOutput._client">
            <summary>
            ADLS Client
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusOutput._ugr">
            <summary>
            Way the user or group object will be represented
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusOutput._path">
            <summary>
            Path of the directory containing the sub-directories or files
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileStatusOutput.GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileStatusList">
            <summary>
            Encapsulates a collection storing the list of directory entries. Once the collection is traversed, retrieves next set of directory entries from server
            This is for internal use only. Made public because we want to cast the enumerator to test enumeration with a smaller page size.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.FileStatus">
            <summary>
            Internal collection storing list of directory entries retrieved from server. This is not the whole list of directory entries.
            It's size is less than equal to listSize
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusList._listSize">
            <summary>
            Number of maximum directory entries to retrieve from server at one time
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.ListSize">
            <summary>
            Internal property to set the list size
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusList._maxEntries">
            <summary>
            Maximum number of entries to be enumerated as entered by user. If it is -1 then enumerate all the directory entries
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.RemainingEntries">
            <summary>
            Number of entries left to enumerate
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.EnumerateAll">
            <summary>
            Flag indicating enumerate all the directory entries
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusList._listAfterClient">
            <summary>
            Filename after which we should start the enumeration - entered by user
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.ListAfterNext">
            <summary>
            Filename after which list of files should be obtained from server next time, updated before everytime the 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.ListBefore">
            <summary>
            Filename till which list of files should be obtained from server
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.Client">
            <summary>
            ADLS Client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.Ugr">
            <summary>
            Way the user or group object will be represented
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.Path">
            <summary>
            Path of the directory conatianing the sub-directories or files
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.Current">
            <summary>
            Represents the current directory entry in the internal collection: FileStatus
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileStatusList._position">
            <summary>
            Index representating the current position in the internal collection: FileStatus 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileStatusList.System#Collections#IEnumerator#Current">
            <summary>
            Immplemented interface property
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileStatusList.MoveNext">
            <summary>
            Advances the enumerator to the next element in the internal collection.
            If the end of the internal collection is reached, performs a ListStatus call to the server to see if any more directories/files need to be enumerated. If yes
            then the internal collection is populated with the next set of directory entries. The internal index pointing to the current element is updated. If not, then returns false.
            </summary>
            <returns>True if there is a next element to enumerate else false</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileStatusList.Reset">
            <summary>
            Clears the internal collection and resets the index, ListAfterNext and remaininig entries of collection
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileStatusList.Dispose">
            <summary>
            Disposes the enumerable
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader">
            <summary>
            Class that immplements specific logic for Downloader
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.ChunkWeightThreshold">
            <summary>
            Threshold to determine this is a large file for which we may need chunking for download
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.NumLargeFileThreshold">
            <summary>
            If number of large files is less than this number then only we should chunk large files. Say we have 100 large files then we do not need to do chunking
            because anyways all 100 threads will be active during the download
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.SkipChunkingWeightThreshold">
            <summary>
            Files with sizes less than this limit will never be chunked
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.DownloaderProducerQueue">
            <summary>
            FIFO queue containing directories for producer 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.StartEnumeration">
            <summary>
            Verifies whether input is a directory or a file. If it is a file then there is no need to start the producer
            </summary>
            <returns>True if we need tos tart the producer threads</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.Download(System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,System.Int32,Microsoft.Azure.DataLake.Store.IfExists,System.IProgress{Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus},System.Boolean,System.Boolean,System.Threading.CancellationToken,System.Boolean,System.Int32,System.Int64)">
            <summary>
            Download directory or file from remote server to local
            </summary>
            <param name="srcPath">Remote source path</param>
            <param name="destPath">Local destination path</param>
            <param name="client">ADLS client</param>
            <param name="numThreads">Number of threads- if not passed will take default number of threads</param>
            <param name="shouldOverwrite">Whether to overwrite or skip if the destination </param>
            <param name="progressTracker">Progresstracker to track progress of file transfer</param>
            <param name="notRecurse">If true then does enumeration till one level only, else will do recursive enumeration</param>
            <param name="resume">If true we are resuming a previously interrupted upload process</param>
            <param name="cancelToken">Cancellation Token</param>
            <param name="egressTest">Egress test when we do not write file to local file system</param>
            <param name="egressBufferCapacity">Egress buffer size - Size of the read reuest from server</param>
            <param name="chunkSize">Chunk Size used for chunking</param>
            <returns>Transfer status of the download</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.GetDestDirectoryFormatted(System.String)">
            <summary>
            Replaces the remote directory separator in the input path by the directory separator for local file system
            </summary>
            <param name="relativePath">Input path</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.GetDestDirectorySeparator">
            <summary>
            Gets the directory separator for local file system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.AddConcatJobToQueue(System.String,System.String,System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Adds the concat jobs for downloader
            </summary>
            <param name="source">Source file path</param>
            <param name="chunkSegmentFolder">Temporary destination file name</param>
            <param name="dest">Destination file</param>
            <param name="totSize">Total size of the file- needed for verification of the copy</param>
            <param name="totalChunks">Total number of chunks</param>
            <param name="doUploadRenameOnly"></param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.AddDirectoryEntryToList(Microsoft.Azure.DataLake.Store.DirectoryEntry)">
            <summary>
            Adds the directory entry to internal list
            </summary>
            <param name="dir">DirectoryEntry</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.FirstPassProducerRun">
            <summary>
            Chunking always during Download is not a effecient choice. Because multiple threads writing to different offsets of file on local file system is very slow.
            Chunking only makes sense when there are less number of very large files. File sizes greater than ChunkWeightThreshold is defined as large file
            If number of files with sizes greater than ChunkWeightThreshold is less than NumLargeFileThreshold then we will do chunking. Also for files whose size is less than DefaultSkipChunkingWeightThreshold there is
            no need of chunking. If we have large number of large files then we also can do without chunking.
            In first pass producer threads which will traverse directory tree and store the entries in a internal list or add them as non-chunked jobs to job queue depending on it's size
            Run on multiple threads
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileDownloader.FinalPassProducerRun">
            <summary>
            Run by one thread only. Traverse the internal list and add chunked or non-chunked jobs depending on the criteria
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData">
            <summary>
            It contains the metadata of the file: Source path, Destination path, ChunkSegmentFolder, Total file length
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.ChunkSegmentFolder">
            <summary>
            For uploader:
                 1)when files are chunked this is the directory name where chunks are saved. 
                 2)when files are not chunked this is null
            For downloader:
                1) When files are chunked temporary GUID name
                2) when not chunked same as uploader
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.SrcFile">
            <summary>
            Source full path
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.Dest">
            <summary>
            Destination Path
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.TotSize">
            <summary>
            Total size of the file
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.TotalChunks">
            <summary>
            Total number of chunks of the file
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData._numChunksTransfered">
            <summary>
            Number of chunks transferred. When all the chunks are transferred then concat job is queued
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData._fileExists">
            <summary>
            Flag that stores wether file exists. It is null when no information is known. 
            Once it is not null, we do not need to make FileSystem calls to know wehther the file exists
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData._downloadTempFileExists">
            <summary>
            Download specific flag. For download if it is true, then the file is already created on local file system. If it is false then file needs to be created.
            This is necessary because when we do chunked downloads more than one thread writes at different offsets to same file locally 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.IsUpload">
            <summary>
            Whether this is upload or download
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.IngressOrEgressTest">
            <summary>
            If true for download we do not want to write file to local filesystem, for upload we want to read from a random stream
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.EgressBufferSize">
            <summary>
            Download specific. The buffer size of 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileMetaData.ShouldSkipForChunkedFile(Microsoft.Azure.DataLake.Store.AdlsClient)">
            If overwrite then no need to skip. If not overwrite and the file exists then skip. This method is only necessary for chunked file transfers because:
            For uploader we do not want to create the temorary 240MB chunks if the file exists and user wants to IfExists.Fail For downloader we do not want different threads 
            to write to the temp file if the destination file exists and user wants IfExists.Fail.
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon">
            <summary>
            Class that immplements the generic logic for upload and download
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.NotRecurse">
            <summary>
            If true then will not recurse under sub directories
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.NumProducerThreads">
            <summary>
            Number of producer threads
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.NumConsumerThreads">
            <summary>
            Total number of consumer threads
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.ChunkSizeDefault">
            <summary>
            Default chunk size
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.ChunkSize">
            <summary>
            Chunk size either default or set by user
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.ConsumerQueue">
            <summary>
            Priority queue containing jobs for Consumer threads
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.Status">
            <summary>
            Results of File transfer
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.SourcePath">
            <summary>
            Source Path
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.DestPath">
            <summary>
            Destination path
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.DoOverwrite">
            <summary>
            Whether to overwrite the file in destination if it exists. If it is false and the file exists then upload or download will be skipped for the file
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.ProgressTracker">
            <summary>
            Whether to collect stats
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.IngressOrEgressTest">
            <summary>
            True if we just want to test ingress or egress of ADL
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon._threadProducer">
            <summary>
            Producer threads
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon._threadConsumer">
            <summary>
            Consumer threads
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon._threadStats">
            <summary>
            Stat collecting threads
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon._consumerDone">
            <summary>
            Flag that represents consumer is done- used by stat collection thread
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.AddConcatJobToQueue(System.String,System.String,System.String,System.Int64,System.Int64,System.Boolean)">
            Adds jobs for concat
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.SetupThreads">
            <summary>
            Initializes the producer threads, consumer threads- This is not done in constructor because it has separate immplementation for start enumeration
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.InitializesProducerThreads(System.Threading.ThreadStart)">
            <summary>
            Initializes the producer threads with the delegate method
            </summary>
            <param name="ts">Method that the threads run</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.StartProducer">
            <summary>
            Starts the producer threads
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.WaitForProducerToFinish">
            <summary>
            Wait for producer threads to finish
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.StartConsumer">
            <summary>
            Starts the consumer
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.RunTransfer">
            Main method that does the upload or download
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.StartEnumeration">
            <summary>
            Verifies whether input is a directory or a file. If it is a file then there is no need to start the producer
            </summary>
            <returns>True if we need to start the producer threads</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.FirstPassProducerRun">
            <summary>
            Delegate that runs the producer logic for the first pass. It will do the enumeration first and determine the sample distribution of file sizes. It might add some files directly to job queue
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.FinalPassProducerRun">
            <summary>
            Delegate that runs the producer logic for the final pass. It will go over already enumerated list, chunks each file based on a criteria and adds to job queue.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.GetDestDirectoryFormatted(System.String)">
            Gets the destination path in correct format
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.GetDestDirectorySeparator">
            Gets the destination directory separator
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.AssignMetaData(System.String,System.String,System.String,System.Int64,System.Int64,System.Int64)">
            Creates the MetaData for uploader or downloader, alreadyChunksTransferred will be greater than -1 only if a chunked file is being resumed after it is incomplete last time
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.AddFileToConsumerQueue(System.String,System.Int64,System.Boolean,System.Int64@)">
            Adds file or its chunks to Consumer queue
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.StatusUpdate(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            Calculates the status update
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.StatsRun">
            <summary>
            Delegate method run by stats thread
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileTransferCommon.ConsumerRun">
            <summary>
            Consumer method- Polls each job from the job queue, runs the job and stores the transfer result if failed or skipped
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader">
            <summary>
            Class that immplements specific logic for Uploader
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.UploaderProducerQueue">
            <summary>
            FIFO queue containing directories for producer queue in case of Uploader
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.GetDestDirectoryFormatted(System.String)">
            Replaces the local directory separator in the input path by the directory separator for remote file system
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.GetDestDirectorySeparator">
            <summary>
            Gets the directory separator for remote file system-ADLS
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.Upload(System.String,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,System.Int32,Microsoft.Azure.DataLake.Store.IfExists,System.IProgress{Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus},System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken,System.Boolean,System.Int64)">
            <summary>
            Upload directory or file from local to remote
            </summary>
            <param name="srcPath">Local source path</param>
            <param name="destPath">Remote destination path</param>
            <param name="client">ADLS client</param>
            <param name="numThreads">Number of threads- if not passed will take default number of threads</param>
            <param name="shouldOverwrite">Whether to overwrite or skip if the destination </param>
            <param name="progressTracker">Progresstracker to track progress of file transfer</param>
            <param name="notRecurse"> If true then just does a enumeration in first level</param>
            <param name="resume">If true we are resuming a previously interrupted upload process</param>
            <param name="isBinary">If false then we want to upload at new line boundaries</param>
            <param name="cancelToken">Cancellation Token</param>
            <param name="ingressTest">True if we just want to test ingress</param>
            <param name="chunkSize">Chunk Size used for chunking</param>
            <returns>Transfer Status of the upload</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.StartEnumeration">
            Verifies whether input is a directory or a file. If it is a file then there is no need to start the producer
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.AddConcatJobToQueue(System.String,System.String,System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Adds the concat jobs for uploader
            </summary>
            <param name="source">Source file path</param>
            <param name="chunkSegmentFolder">Temporary folder where chunks are located</param>
            <param name="dest">Destination file</param>
            <param name="totSize">Total size of the file- needed for verification of the copy</param>
            <param name="totalChunks">Total number of chunks</param>
            <param name="doUploadRenameOnly"></param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.FirstPassProducerRun">
            <summary>
            Producer code which traverses local directory tree and add them as chunked or non-chunked jobs to job queue depending on it's size. Currently this directly adds 
            jobs to job queue but in future we will try to add files to an internal list and add them as jobs in FinalPassProducerRun.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.AssignMetaData(System.String,System.String,System.String,System.Int64,System.Int64,System.Int64)">
            Creates the MetaData for uploader, alreadyChunksTransferred will be greater than -1 only if a chunked file is being resumed after it is incomplete last time
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.FileUploader.FinalPassProducerRun">
            <summary>
            Currently this is not immplemented. We do a constant chunking size. But for future we would like to increase chunking size for 
            very large files so do some kind of adaptive chunking.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.ConcatenateJob">
            <summary>
            For uploader concatenates the chunks and for downloader renames the temporary filename.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.ConcatenateJob.ChunkSegmentFolder">
            <summary>
            For uploader:
                 1)when files are chunked this is the directory name where chunks are saved. 
            For downloader:
                1) When files are chunked, temporary GUID name
            When not chunked, Concat job is not created
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.ConcatenateJob.Destination">
            <summary>
            Destination path
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.ConcatenateJob.Client">
            <summary>
            Adls client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.ConcatenateJob.FileSize">
            <summary>
            Total file size- use for uploader or downloader verification
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.ConcatenateJob.IsUpload">
            <summary>
            Whether it is upload or download
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.ConcatenateJob._totalChunks">
            <summary>
            Total number of chunks
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.ConcatenateJob.VerifyLocalExist">
            <summary>
            Verify whether the input file's length and file length after upload or download are same
            </summary>
            <returns>True if it matches else false</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob">
            <summary>
            Does the main copy of the file for both uploader and downloader
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob.ChunkIndex">
            <summary>
            Index of the chunk of the main file this job corresponds to. If -1 then this job corresponds to a non-chunked file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob.Metadata">
            <summary>
            Metadata of the file.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob.Client">
            <summary>
            ADls client
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob.BuffSize">
            <summary>
            Buffersize of read from source and write to destination. This has to same as ADlsOutputStream.Buffercapacity. Otherwise we haveto change immplementation of ReadForwardTillNewLine.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob.Destination">
            <summary>
            Actual destination of the file
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob.GetRemoteStream(System.Boolean@)">
            For uploader it is the AdlsOutputStream, for downloader it is the AdlsInputStream. For Uploader: for chunked files it creates the chunk file with Overwrite flag
            for non chunked file it creates the file with whatever flag user has entered. If the user has entered IfExists.Fail and file exists it will give an ADLSException and we skip the file
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob.GetLocalStream(System.Boolean@)">
            For uploader it is FileStream open , For downloader it is FileStream write For Downloader: for chunked downloads it creates the temporary file with FileMode.Create
            for non chunked download it creates the file with Create if user has specified overwrite else CreateNew. If the user has entered IfExists.Fail and file exists it will give
             an IOException and we skip the file
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.CopyFileJob.TransferChunks(System.IO.Stream,System.IO.Stream)">
            Seeks the read stream to the offset. If download then seeks the write stream to the offset. Copies data from read stream to write stream
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.Job">
            <summary>
            Abstract class for a job
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.Job.JobPriority">
            <summary>
            Priority- Represents it's position in the max-heap. Higher priority means the job will be completed quicker.
            ChunkedFileCopy has higher priority than NonChunkedFile copy and concatenate job
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.Job.DoJob">
            Performs the job and returns the transfer result of that job
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.MakeDirJob">
            <summary>
            Job to create empty directory
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.MakeDirJob.DestDirectoryNm">
            <summary>
            Directory name
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.MakeDirJob.Client">
            <summary>
            Adls client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.MakeDirJob.IsUpload">
            <summary>
            Whether it is uploader or downloader
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.Jobs.PoisonJob">
            <summary>
            Poison job that is enqueued in the priority queue when the enumeration by the producer thread is completed. 
            The priority of the poison job is negative so it will always be polled at end when no jobs are left.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus">
            <summary>
            Contains information regarding Transfer status
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.TotalChunksToTransfer">
            <summary>
            Total number of chunks that needs to be transferred after enumeration
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.TotalNonChunkedFileToTransfer">
            <summary>
            Total number of unchunked files that needs to be transferred after enumeration
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.TotalFilesToTransfer">
            <summary>
            Total number of files (includes chunked and unchunked) that need to be transferred after enumeration
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.TotalSizeToTransfer">
            <summary>
            Total size of files or chunks that need to be transferred after enumeration
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.TotalDirectoriesToTransfer">
            <summary>
            Total number of empty directories that needs to be transferred after enumeration
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.FilesTransfered">
            <summary>
            Tracks number of files (includes chunked and unchunked) transferred correctly
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.ChunksTransfered">
            <summary>
            Tracks number of chunks transferred correctly
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.NonChunkedFileTransferred">
            <summary>
            Tracks number of unchunked files transferred
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.SizeTransfered">
            <summary>
            Tracks number of chunks transferred correctly
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.DirectoriesTransferred">
            <summary>
            Tracks number of empty directories transferred correctly
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.EntriesFailed">
            <summary>
            List of directories or chunks or unchunked files that did not get transferred correctly
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus.EntriesSkipped">
            <summary>
            List of name of files that are skipped because we did not want to overwrite existing files
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.SingleEntryTransferStatus">
            <summary>
            Contains the transfer result of each file or chunk or directory transfer
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.SingleEntryTransferStatus.EntryName">
            <summary>
            Name of the chunk or file or directory
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.SingleEntryTransferStatus.ChunkId">
            <summary>
            Chunk Id.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.SingleEntryTransferStatus.Source">
            <summary>
            Source file name
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.SingleEntryTransferStatus.EntrySize">
            <summary>
            Size of the chunk or file
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.SingleEntryTransferStatus.Errors">
            <summary>
            Any errors if the transfer was not successful
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.SingleEntryTransferStatus.Type">
            <summary>
            Type of entry: File, chunk or directory
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.FileTransfer.SingleEntryTransferStatus.Status">
            <summary>
            Status of the transfer: Successful or failed or skipped if we didnt want to overwrite the destination if it exists
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.EntryType">
            <summary>
            Enum for different types of entries transferred
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.FileTransfer.SingleChunkStatus">
            <summary>
            Status of a transfer of single entry
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.SingleChunkStatus.Successful">
            <summary>
            Transfer is successful
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.SingleChunkStatus.Failed">
            <summary>
            Transfer failed
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.FileTransfer.SingleChunkStatus.Skipped">
            <summary>
            If the destination file exists and the user has selected to fail if the destination exists then it is skipped
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.IfExists">
            <summary>
            Enum specifying actions to take while creating new file if the file exists
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.IfExists.Overwrite">
            <summary>
            Overwrite the existing file
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.IfExists.Fail">
            <summary>
            Fails the request
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.LatencyTracker">
             <summary>
             Single entry, comma separated:
                  1. Client Request ID
                  2. latency in milliseconds
                  3. error code(if request failed)
                  4. Operation
                  5. Request+response body Size(if available, zero otherwise)
                  6. Instance of ADLStoreClient(a unique number per instance in this VM)
            
                 Multiple entries can be on a single request.Entries will be separated by semicolons
                 Limit max entries on a single request to three, to limit increase in HTTP request size.
             </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.LatencyTracker.LatencyQueue">
            <summary>
            Queue containing the latency entries
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.LatencyTracker.Maxsize">
            <summary>
            Maximum size of the latency queue
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.LatencyTracker.Maxperline">
            <summary>
            Maximum number of latency entries in one request
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.LatencyTracker._disabled">
            <summary>
            Tracks whether latencyTracker is disabled
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.LatencyTracker.Disable">
            <summary>
            Disables the Latency tracker
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.LatencyTracker.Add(System.String)">
            <summary>
            Adds a latency entry to the back of queue
            </summary>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.LatencyTracker.Dequeue">
            <summary>
            Returns the front element of queue if there is any else returns null
            </summary>
            <returns>Front element of queue if there is else null</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.LatencyTracker.AddLatency(System.String,System.Int32,System.Int64,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Add error/latency details of last http request to the queue
            </summary>
            <param name="clientRequestId">Client request GUID</param>
            <param name="retry">Retry number</param>
            <param name="latency">Total latency</param>
            <param name="error">Error</param>
            <param name="opCode">OpCode of the Http request</param>
            <param name="length">Data length+Response length</param>
            <param name="clientId">ADLS Client Id</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.LatencyTracker.GetLatency">
            <summary>
            Retrieves the latency/error entries for upto maximum last 3 requests
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient">
            <summary>
            Mock Adls Client. All the operations are done in memory.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.GetMockClient">
            <summary>
            Factory method that returns an instance of Mock adls client
            </summary>
            <returns>Mock ADls Client</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.CreateDirectory(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a directory- Creates an entry for the directory in the internal dictionary
            </summary>
            <param name="dirName">Directory name</param>
            <param name="octalPermission">Octal permission</param>
            <param name="cancelToken">Cacnellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.GetReadStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a memory stream for reading data of the file
            </summary>
            <param name="filename">File name</param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.GetAppendStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the memory stream for appending to the file encapsulated in mock adls output stream.
            </summary>
            <param name="filename">File name</param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.CreateFile(System.String,Microsoft.Azure.DataLake.Store.IfExists,System.String,System.Boolean)">
            <summary>
            Creates an entry to the internal dictionary for the new file. The entry encapsulates AclStatus, DirectoryEntry and a memory stream
            </summary>
            <param name="filename">File name</param>
            <param name="mode">If exists hether to overwrite or fail</param>
            <param name="octalPermission">Permission string</param>
            <param name="createParent">True if we create parent directories- currently has no effect</param>
            <returns>Mock ADls output stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an entry from the internal dictionary
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.DeleteRecursive(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes all entries within a directory or delete a file
            </summary>
            <param name="path">Path of directory or file</param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.Rename(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes the source entry and add a new entry in the internal dictionary with the same metadata of the source entry
            </summary>
            <param name="path">Source path name</param>
            <param name="destination">Destination path</param>
            <param name="overwrite">True if we want to overwrite the destination file</param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.GetDirectoryEntry(System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Get Directory or file info
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="userIdFormat">User or group Id format</param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.ConcatenateFiles(System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Concats the memory stream of source entries and merges them into a new memory stream
            </summary>
            <param name="destination">Destination entry</param>
            <param name="concatFiles">Concat files</param>
            <param name="deleteSource">True if we want to delete source</param>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.EnumerateDirectory(System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Returns a list of entries contained under the given directory
            </summary>
            <param name="path">Path of directory or file</param>
            <param name="userIdFormat">User or group Id format</param>
            <param name="cancelToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.SetExpiryTime(System.String,Microsoft.Azure.DataLake.Store.ExpiryOption,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sets the expiry time for the file. 
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="eopt">Expiry option</param>
            <param name="expiryTime">Expiry time</param>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.SetPermission(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the permission string for the given path
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="permission">Permission string</param>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.ModifyAclEntries(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Adds acl entries for a given path
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="aclSpec">Acl list to append</param>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.SetAcl(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Sets new acl entries for the given path.
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="aclSpec">Acl list to set</param>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.SetOwner(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the owner and group of the path
            </summary>
            <param name="path">Path of file or directory</param>
            <param name="owner">Owner guid</param>
            <param name="group">Group guid</param>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.RemoveAclEntries(System.String,System.Collections.Generic.List{Microsoft.Azure.DataLake.Store.Acl.AclEntry},System.Threading.CancellationToken)">
            <summary>
            Removes specified Acl Entries for a file or directory from the internal AclStatus maintained in memory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="aclSpec">List of Acl Entries to remove</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.RemoveAllAcls(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes all Acl Entries for a file or directory from the internal AclStatus maintained in memory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.RemoveDefaultAcls(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes all Acl Entries of AclScope default for a file or directory from the internal AclStatus maintained in memory.
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.GetAclStatus(System.String,Microsoft.Azure.DataLake.Store.UserGroupRepresentation,System.Threading.CancellationToken)">
            <summary>
            Gets the ACL entry list, owner ID, group ID, octal permission and sticky bit (only for a directory) of the file/directory
            </summary>
            <param name="path">Path of the file or directory</param>
            <param name="userIdFormat">way to represent the user/group object</param>
            <param name="cancelToken">CancellationToken to cancel the request</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.BulkUpload(System.String,System.String,System.Int32,Microsoft.Azure.DataLake.Store.IfExists,System.IProgress{Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus},System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Bulk uploads file only. Reads a local file and maintains the memory stream for the entry
            </summary>
            <param name="srcPath">Local source path</param>
            <param name="destPath">Remote destination path - It should always be a directory.</param>
            <param name="numThreads">Not used</param>
            <param name="shouldOverwrite">Whether to overwrite or skip if the destination exists</param>
            <param name="progressTracker">Not used</param>
            <param name="notRecurse">Not used</param>
            <param name="resume">Not used</param>
            <param name="isBinary">Not used</param>
            <returns>Transfer Status encapsulating the details of upload</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsClient.BulkDownload(System.String,System.String,System.Int32,Microsoft.Azure.DataLake.Store.IfExists,System.IProgress{Microsoft.Azure.DataLake.Store.FileTransfer.TransferStatus},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads data from memory stream and save it to local file
            </summary>
            <param name="srcPath">Remote source path</param>
            <param name="destPath">Local destination path. It should always be a directory.</param>
            <param name="numThreads">Not used</param>
            <param name="shouldOverwrite">Whether to overwrite or skip if the destination exists</param>
            <param name="progressTracker">Not used</param>
            <param name="notRecurse">Not used</param>
            <param name="resume">Not used</param>
            <returns>Transfer status encapsulating the details of download</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsInputStream">
            <summary>
            Mock Adls Input stream for unit test
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsInputStream.Length">
            <summary>
            Length of the stream, Cannot be set only retrieved
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsInputStream.Position">
            <summary>
            Position of the stream from begining
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current underlying stream and advances the position within the stream by the number of bytes read
            Synchronous operation.
            </summary>
            <param name="output">Output byte array</param>
            <param name="offset">offset at which data should be put in the output array</param>
            <param name="count">Count of the bytes read</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsInputStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a sequence of bytes from the current underlying stream and advances the position within the stream by the number of bytes read
            Asynchronous operation.
            </summary>
            <param name="output">Output byte array</param>
            <param name="offset">offset at which data should be put in the output array</param>
            <param name="count">Count of the bytes read</param>
            <param name="cancelToken">Cancellation Token</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Updates the position of the underlying stream based on SeekOrigin
            </summary>
            <param name="offset">Byte offset relative to the origin parameter</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>Current new position of the stream</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsInputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Stream and optionally releases the managed resources. For this implementation, we do
            not dispose the underlying stream since we use the stream for both read and write.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsOutputStream">
            <summary>
            Mock Adls Output stream for unit test
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsOutputStream.Position">
            <summary>
            Set is not supported. Gets the position where next data will be written
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsOutputStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes data from buffer to underlying stream and updates the metadata
            </summary>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsOutputStream.Flush">
            <summary>
            Synchronously flushes data from buffer to underlying stream and updates the metadata
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsOutputStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes data to internal buffer. If the buffer fills up then writes to the underlying stream.
            Does it asynchronously
            </summary>
            <param name="buffer">Input byte array containing the Data to write</param>
            <param name="offset">Offset in buffer</param>
            <param name="count">Count of bytes to write</param>
            <param name="cancelToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to internal buffer. If the buffer fills up then writes to the underlying stream.
            Does it synchronously
            </summary>
            <param name="buffer">Input byte array containing the Data to write</param>
            <param name="offset">Offset in buffer</param>
            <param name="count">Count of bytes to write</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.MockAdlsFileSystem.MockAdlsOutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Stream and optionally releases the managed resources. For this implementation, we do
            not dispose the underlying stream since we use the stream for both read and write.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.Operation">
            <summary>
            Lists a dictionary of all available Operations for a Http request
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Operation.Method">
            <summary>
            HTTP method the operation uses like GET/PUT/POST
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Operation.RequiresBody">
            <summary>
            Whether the http request for this operation requires request body (data)
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Operation.ReturnsBody">
            <summary>
            Whether the http response for this operation returns response body (data)
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.Operation.Namespace">
            <summary>
            What handler it uses WebHdfs or WebHdfsExt
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.Operation.Operations">
            <summary>
            Dictionary containing the Operations
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.Constants">
            <summary>
            Constants that describes properties of HttpWeb request
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.OperationResponse">
            <summary>
            Class encapsulates the response of one operation. Available operations are in Operation.cs
            For one operation, Http request can sent more than one time (More than one retry).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.OpCode">
            <summary>
            Operation Code
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.Retries">
            <summary>
            Number of retries for the operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.HttpStatus">
            <summary>
            HttpStatus Code for the last Http request for this operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.HttpMessage">
            <summary>
            Http message/ output for the last Http request for this operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.RemoteExceptionName">
            <summary>
            Remote exception name returned from the server for the last Http request for this operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.RemoteExceptionMessage">
            <summary>
            Remote exception message returned from the server for the last Http request for this operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.RemoteExceptionJavaClassName">
            <summary>
            Remote exception java classname returned from the server for the last Http request for this operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.ExceptionHistory">
            <summary>
            Exception history of all the retries for this operation. This should not be reset for every retry
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.Ex">
            <summary>
            Any other exception thrown while sending the last Http request for the operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.IsSuccessful">
            <summary>
            Whether the last Http request was successful for the operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.Error">
            <summary>
            Any other error caught by the code while sending the last Http request for the operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.RequestId">
            <summary>
            Request Id or the trace ID returned from the server for the last request for the operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.LastCallLatency">
            <summary>
            Total latency for the last request for the operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.OperationResponse.TokenAcquisitionLatency">
            <summary>
            Total latency for token acquisition for the last request for the operation
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.OperationResponse.Reset">
            <summary>
            Resets all memebers exception the ExceptionHistory
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.PoisonJob">
            <summary>
            Poison job that is enqueued in the priority queue when the enumeration by the producer thread is completed. 
            The priority of the poison job is negative so it will always be polled at end when no jobs are left.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Azure.DataLake.Store.QueryParams" -->
        <member name="F:Microsoft.Azure.DataLake.Store.QueryParams.Separator">
            <summary>
            Separator for appending the http request parameters for an operation
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.QueryParams.ApiVersion">
            <summary>
            This is the value of one parameter "api-version" that is passed along every request
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.QueryParams.Param">
            <summary>
            Dictionary containing parameter and their corresponding values
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.QueryParams.Add(System.String,System.String)">
            <summary>
            Adds the value for each parameter
            </summary>
            <param name="key">parameter name</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.QueryParams.Serialize(System.String)">
            <summary>
            Serializes the parameters and their values in form of a string
            </summary>
            <param name="opCodes">Operation Code which is the value of parameter "op"</param>
            <returns>Serialized parameter:value string for the request</returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.QueueTools.PriorityQueue`1">
            <summary>
            Priority Queue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.RequestOptions">
            <summary>
            This class contains the request parameters like timeout, Retry Policy and unique requestId
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.RequestOptions.RequestId">
            <summary>
            Unique request Id of the Http Request
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.RequestOptions.TimeOut">
            <summary>
            Timeout for Http request and stream read and write
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.RequestOptions.RetryOption">
            <summary>
            Type of retry policy to use
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.RequestOptions.#ctor">
            <summary>
            Initializes request Id as GUID, Timeout as 60 seconds, and the request option as No retry
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.RequestOptions.#ctor(Microsoft.Azure.DataLake.Store.RetryPolicies.RetryPolicy)">
            <summary>
            Initializes request Id as GUID (default), Timeout as 60 seconds (default), and the request option
            </summary>
            <param name="rp">Retry option</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.RequestOptions.#ctor(System.String,System.TimeSpan,Microsoft.Azure.DataLake.Store.RetryPolicies.RetryPolicy)">
            <summary>
            Initializes request Id, Timeout, and the request option
            </summary>
            <param name="requestId">request Id</param>
            <param name="timeOut">Time out</param>
            <param name="rp">Retry policy</param>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.RetryPolicies.ExponentialRetryPolicy">
            <summary>
            Exponential retry policy.
            Does retries for following: 
            For 5xx http status codes except 501 and 505 
            For 401, 408 and 429 status codes
            Any other unhandled exception from web- Request timeout for client, etc
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.RetryPolicies.ExponentialRetryPolicy.NumberOfRetries">
            <summary>
            Tracks the current number of retries
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.RetryPolicies.ExponentialRetryPolicy.MaxRetries">
            <summary>
            Maximum number of retries
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.RetryPolicies.ExponentialRetryPolicy.ExponentialFactor">
            <summary>
            Factor by which we will increase the interval
            </summary>
        </member>
        <member name="P:Microsoft.Azure.DataLake.Store.RetryPolicies.ExponentialRetryPolicy.ExponentialInterval">
            <summary>
            Wait time
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.RetryPolicies.ExponentialRetryPolicy.#ctor">
            <summary>
            Default settings of Exponential retry policies
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.RetryPolicies.ExponentialRetryPolicy.#ctor(System.Int32,System.Int32)">
            <summary>
            Exponential retry policies with specified maximum retries and interval
            </summary>
            <param name="maxRetries">Maximum retries</param>
            <param name="interval">Exponential time interval</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.RetryPolicies.ExponentialRetryPolicy.ShouldRetry(System.Int32,System.Exception)">
            <summary>
            Determines whether to retry exponentially. 
            </summary>
            <param name="httpCode">Http status code</param>
            <param name="ex">Last exception that we saw during Httprequest</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.RetryPolicies.NoRetryPolicy">
            <summary>
            No retry policy
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.RetryPolicies.NoRetryPolicy.ShouldRetry(System.Int32,System.Exception)">
            <summary>
            Returns false always
            </summary>
            <param name="httpCode">Http Code</param>
            <param name="ex">Last exception that we saw during Httprequest</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.RetryPolicies.RetryPolicy">
            <summary>
            Abstract class immplemented by different types of retry policies
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.RetryPolicies.RetryPolicy.ShouldRetry(System.Int32,System.Exception)">
            <summary>
            Determines whether the HttpRequest should be retried
            </summary>
            <param name="httpCode"></param>
            <param name="ex">Last exception that we saw during Httprequest</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.SyncFlag">
            <summary>
            Flags that are passed as parameters as a part of Http request for operations Write and Append
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.SyncFlag.DATA">
            <summary>
            Holds the lease.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.SyncFlag.METADATA">
            <summary>
            Metadata needs to be updated after data is appended
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.SyncFlag.CLOSE">
            <summary>
            update metadata.
            Close the file handler or stream
            Releases the lease.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.UserGroupRepresentation">
            <summary>
            Enumerater defining how the user or group objects will be represented in calls that return group or user
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.UserGroupRepresentation.ObjectID">
            <summary>
            Object ID which is a immutable GUID representing the user or group.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.UserGroupRepresentation.UserPrincipalName">
            <summary>
            User Principal name of the user or group. This can be changed. This involves an additional lookup.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.DataLake.Store.WebTransport">
            <summary>
            Http layer class to send htttp requests to the server. We have both async and sync MakeCall. The reason we have that is if the application is doing some operations using explicit threads,
            then using async-await internally creates unecessary tasks for worker threads in threadpool. Application can create explicit threads in cases of uploader and downloader.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.WebTransport.WebTransportPowershellLog">
            <summary>
            Logger to log VERB, Header of requests and responses headers
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.WebTransport.WebTransportLog">
            <summary>
            Logger to log messages related to Http transport
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.WebTransport.TokenLog">
            <summary>
            Logger to log messages related to authorization token
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.WebTransport.OnCancel">
            <summary>
            Delegate that encapsulatesz the method that gets called when CancellationToken is cancelled
            </summary>
        </member>
        <member name="F:Microsoft.Azure.DataLake.Store.WebTransport.UrlLength">
            <summary>
            Capacity of the stringbuilder to build the Http request URL
            </summary>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.OnTokenCancel(System.Object)">
            <summary>
            Method that gets called when CancellationToken is cancelled. It aborts the Http web request.
            </summary>
            <param name="state">HttpWebRequest instance</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.MakeCallAsync(System.String,System.String,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.QueryParams,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Calls the API that makes the HTTP request to the server. Retries the HTTP request in certain cases. This is a asynchronous call.
            </summary>
            <param name="opCode">Operation Code</param>
            <param name="path">Path of the file or directory</param>
            <param name="requestData">byte array, offset and length of the data of http request</param>
            <param name="responseData">byte array, offset and length of the data of http response. byte array should be initialized for chunked response</param>
            <param name="quer">Headers for request</param>
            <param name="client">ADLS Store CLient</param>
            <param name="req">Request options containing RetryOption, timout and requestid </param>
            <param name="resp">Contains the response message </param>
            <param name="cancelToken">CAncellationToken to cancel the operation</param>
            <returns>Tuple of Byte array containing the bytes returned from the server and number of bytes read from server</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.MakeCall(System.String,System.String,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.QueryParams,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Calls the API that makes the HTTP request to the server. Retries the HTTP request in certain cases. This is a synchronous call.
            </summary>
            <param name="opCode">Operation Code</param>
            <param name="path">Path of the file or directory</param>
            <param name="requestData">byte array, offset and length of the data of http request</param>
            <param name="responseData">byte array, offset and length of the data of http response. byte array should be initialized for chunked response</param>
            <param name="quer">Headers for request</param>
            <param name="client">ADLS Store CLient</param>
            <param name="req">Request options containing RetryOption, timout and requestid </param>
            <param name="resp">Contains the response message </param>
            <returns>Tuple of Byte array containing the bytes returned from the server and number of bytes read from server</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.VerifyMakeCallArguments(System.String,System.String,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.QueryParams,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Verifies whether the arguments for MakeCall is correct. Throws exception if any argument is null or out of range.
            </summary>
            <param name="opCode">Operation Code</param>
            <param name="path">Path of the file or directory</param>
            <param name="requestData">byte array, offset and length of the data of http request</param>
            <param name="quer">Headers for request</param>
            <param name="client">ADLS Store CLient</param>
            <param name="req">Request options containing RetryOption, timout and requestid </param>
            <param name="resp">Contains the response message </param>
            <returns>False if there is any errors with arguments else true</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.HandleMakeSingleCallResponse(System.String,System.String,Microsoft.Azure.DataLake.Store.OperationResponse,System.Int32,System.Int32,System.String,System.Int64,System.String,System.Int32@)">
            <summary>
            After MakeSingleCall determines whether the HTTP request was succesful. Populates the error, logs messages and update4s the latency tracker.
            </summary>
            <param name="opCode">Operation Code</param>
            <param name="path">Path of the file or directory</param>
            <param name="resp">Contains the response message </param>
            <param name="responseLength">Length of the response returned by the server</param>
            <param name="requestLength">Length of the request data</param>
            <param name="requestId">Request ID</param>
            <param name="clientId">Client Id of the application</param>
            <param name="querParams">Serialized query parameter of the Http request</param>
            <param name="numRetries">Number of retries</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.DetermineIsSuccessful(Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Determine whether the Http request was successful based on error or Exception or remote exception
            </summary>
            <param name="resp">OperationResponse</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.MakeSingleCallAsync(System.String,System.String,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.QueryParams,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse,System.Threading.CancellationToken)">
            <summary>
            Makes a single Http call to the server, sends the request and obtains the response. This is a asynchronous call.
            </summary>
            <param name="opCode">Operation Code</param>
            <param name="path">Path of the file or directory</param>
            <param name="requestData">byte array, offset and length of the data of http request</param>
            <param name="responseData">byte array, offset and length of the data of http response. byte array should be initialized for chunked response</param>
            <param name="qp">Headers for request</param>
            <param name="client">ADLS Store CLient</param>
            <param name="req">Request options containing RetryOption, timout and requestid </param>
            <param name="resp">Contains the response message </param>
            <param name="cancelToken">CancellationToken to cancel the operation</param>
            <returns>Tuple of Byte array containing the bytes returned from the server and number of bytes read from server</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.MakeSingleCall(System.String,System.String,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.ByteBuffer,Microsoft.Azure.DataLake.Store.QueryParams,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Makes a single Http call to the server, sends the request and obtains the response. This is a synchronous call.
            </summary>
            <param name="opCode">Operation Code</param>
            <param name="path">Path of the file or directory</param>
            <param name="requestData">byte array, offset and length of the data of http request</param>
            <param name="responseData">byte array, offset and length of the data of http response. byte array should be initialized for chunked response</param>
            <param name="qp">Headers for request</param>
            <param name="client">ADLS Store CLient</param>
            <param name="req">Request options containing RetryOption, timout and requestid </param>
            <param name="resp">Contains the response message </param>
            <returns>Tuple of Byte array containing the bytes returned from the server and number of bytes read from server</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.CreateHttpRequestUrl(Microsoft.Azure.DataLake.Store.Operation,System.String,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.OperationResponse,System.String)">
            <summary>
            Serializes the client FQDN, queryparams and token into a request URL
            </summary>
            <param name="op">Operation</param>
            <param name="path">Path of directory or file</param>
            <param name="client">AdlsClient</param>
            <param name="resp">OperationResponse</param>
            <param name="queryParams">Serialized queryparams</param>
            <returns>URL</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.AssignCommonHttpHeaders(System.Net.HttpWebRequest,Microsoft.Azure.DataLake.Store.AdlsClient,Microsoft.Azure.DataLake.Store.RequestOptions,System.String,System.String)">
            <summary>
            Sets the WebRequest headers
            </summary>
            <param name="webReq">HttpWebRequest</param>
            <param name="client">AdlsClient</param>
            <param name="req">RequestOptions</param>
            <param name="token">Auth token</param>
            <param name="opMethod">Operation method (e.g. POST/GET)</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.SetWebRequestContentLength(System.Net.HttpWebRequest,System.Int32)">
            <summary>
            Sets the WebRequest length
            </summary>
            <param name="webReq">HttpWebRequest</param>
            <param name="count">Content length</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.InitializeResponseData(System.Net.HttpWebResponse,Microsoft.Azure.DataLake.Store.ByteBuffer@)">
            <summary>
            Verifies the responseData for the operation and initializes it if the encoding is chunked
            </summary>
            <param name="webResponse">HttpWebResponse</param>
            <param name="responseData">ResponseData structure</param>
            <returns>False if the response is not chunked but the content length is 0 else true</returns>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.HandleWebException(System.Net.WebException,Microsoft.Azure.DataLake.Store.OperationResponse,System.String,System.String,System.String,System.Net.HttpWebRequest,System.Threading.CancellationToken)">
            <summary>
            Handles WebException. Determines whether it is due to cancelled operation, remoteexception from server or some other webexception
            </summary>
            <param name="e">WebException instance</param>
            <param name="resp">OperationResponse</param>
            <param name="path">Path</param>
            <param name="requestId">Request Id</param>
            <param name="token">Auth token</param>
            <param name="webReq">Http Web request</param>
            <param name="cancelToken">Cancel Token</param>
        </member>
        <member name="M:Microsoft.Azure.DataLake.Store.WebTransport.ParseRemoteError(System.IO.Stream,Microsoft.Azure.DataLake.Store.OperationResponse)">
            <summary>
            Parses RemoteException and populates the remote error fields in OperationResponse
            </summary>
            <param name="errorStream">Error Response stream</param>
            <param name="resp">Response instance</param>
            <returns></returns>
        </member>
    </members>
</doc>
